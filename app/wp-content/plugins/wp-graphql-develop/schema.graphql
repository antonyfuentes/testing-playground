schema {
  query: RootQuery
  mutation: RootMutation
}

"""Input for the addFee mutation"""
input AddFeeInput {
  """Fee amount"""
  amount: Float
  clientMutationId: String!

  """Unique name for the fee."""
  name: String!

  """The tax class for the fee if taxable."""
  taxClass: TaxClassEnum

  """Is the fee taxable?"""
  taxable: Boolean
}

"""The payload for the addFee mutation"""
type AddFeePayload {
  cartFee: CartFee
  clientMutationId: String!
}

"""Input for the addToCart mutation"""
input AddToCartInput {
  clientMutationId: String!

  """JSON string representation of extra cart item data"""
  extraData: String

  """Cart item product database ID or global ID"""
  productId: Int!

  """Cart item quantity"""
  quantity: Int

  """Cart item product variation attributes"""
  variation: [ProductAttributeInput]

  """Cart item product variation database ID or global ID"""
  variationId: Int
}

"""The payload for the addToCart mutation"""
type AddToCartPayload {
  cartItem: CartItem
  clientMutationId: String!
}

"""Input for the applyCoupon mutation"""
input ApplyCouponInput {
  clientMutationId: String!

  """Code of coupon being applied"""
  code: String!
}

"""The payload for the applyCoupon mutation"""
type ApplyCouponPayload {
  cart: Cart
  clientMutationId: String!
}

"""
Avatars are profile images for users. WordPress by default uses the Gravatar service to host and fetch avatars from.
"""
type Avatar {
  """
  URL for the default image or a default type. Accepts &#039;404&#039; (return a
  404 instead of a default image), &#039;retro&#039; (8bit),
  &#039;monsterid&#039; (monster), &#039;wavatar&#039; (cartoon face),
  &#039;indenticon&#039; (the &#039;quilt&#039;), &#039;mystery&#039;,
  &#039;mm&#039;, or &#039;mysteryman&#039; (The Oyster Man), &#039;blank&#039;
  (transparent GIF), or &#039;gravatar_default&#039; (the Gravatar logo).
  """
  default: String

  """HTML attributes to insert in the IMG element. Is not sanitized."""
  extraAttr: String

  """Whether to always show the default image, never the Gravatar."""
  forceDefault: Boolean

  """Whether the avatar was successfully found."""
  foundAvatar: Boolean

  """Height of the avatar image."""
  height: Int

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """
  What rating to display avatars up to. Accepts &#039;G&#039;, &#039;PG&#039;,
  &#039;R&#039;, &#039;X&#039;, and are judged in that order.
  """
  rating: String

  """Type of url scheme to use. Typically HTTP vs. HTTPS."""
  scheme: String

  """
  The size of the avatar in pixels. A value of 96 will match a 96px x 96px gravatar image.
  """
  size: Int

  """URL for the gravatar image source."""
  url: String

  """Width of the avatar image."""
  width: Int
}

"""
What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are
judged in that order. Default is the value of the 'avatar_rating' option
"""
enum AvatarRatingEnum {
  G
  PG
  R
  X
}

"""Product backorder enumeration"""
enum BackordersEnum {
  NO
  NOTIFY
  YES
}

"""The cart object"""
type Cart {
  """Connection between the Cart type and the Coupon type"""
  appliedCoupons(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: CartToCouponConnectionWhereArgs
  ): CartToCouponConnection

  """Connection between the Cart type and the CartItem type"""
  contents(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: CartToCartItemConnectionWhereArgs
  ): CartToCartItemConnection

  """Cart contents tax"""
  contentsTax: Float

  """Cart contents total"""
  contentsTotal: Float

  """Cart discount tax"""
  discountTax: Float

  """Cart discount total"""
  discountTotal: Float

  """Do display prices include taxes"""
  displayPricesIncludeTax: Boolean

  """Cart fee tax"""
  feeTax: Float

  """Cart fee total"""
  feeTotal: Float

  """Additional fees on the cart."""
  fees: [CartFee]

  """Is cart empty"""
  isEmpty: Boolean

  """Is customer shipping address needed"""
  needsShippingAddress: Boolean

  """Cart shipping tax"""
  shippingTax: Float

  """Cart shipping total"""
  shippingTotal: Float

  """Cart subtotal"""
  subtotal: Float

  """Cart subtotal tax"""
  subtotalTax: Float

  """Cart total after calculation"""
  total: Float

  """Cart total tax amount"""
  totalTax: Float
}

"""An additional fee"""
type CartFee {
  """Fee amount"""
  amount: Float

  """Fee ID"""
  id: ID!

  """Fee name"""
  name: String!

  """Fee tax class"""
  taxClass: TaxClassEnum

  """Is fee taxable?"""
  taxable: Boolean

  """Fee total"""
  total: Float
}

"""A item in the cart"""
type CartItem {
  """CartItem ID"""
  key: ID!

  """A product in the cart"""
  product: Product

  """Quantity of the product"""
  quantity: Int

  """Item&#039;s subtotal"""
  subtotal: Float

  """Item&#039;s subtotal tax"""
  subtotalTax: Float

  """Item&#039;s tax"""
  tax: Float

  """Item&#039;s total"""
  total: Float

  """Selected variation of the product"""
  variation: ProductVariation
}

"""Connection between the Cart type and the CartItem type"""
type CartToCartItemConnection {
  """Edges for the CartToCartItemConnection connection"""
  edges: [CartToCartItemConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [CartItem]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type CartToCartItemConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: CartItem
}

"""Arguments for filtering the CartToCartItemConnection connection"""
input CartToCartItemConnectionWhereArgs {
  """Limit results to cart item that require shipping"""
  needShipping: Boolean
}

"""Connection between the Cart type and the Coupon type"""
type CartToCouponConnection {
  """Edges for the CartToCouponConnection connection"""
  edges: [CartToCouponConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Coupon]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type CartToCouponConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Coupon
}

"""Arguments for filtering the CartToCouponConnection connection"""
input CartToCouponConnectionWhereArgs {
  """Limit result set to resources with a specific code."""
  code: String

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """Ensure result set excludes specific IDs."""
  exclude: [Int]

  """Limit result set to specific ids."""
  include: [Int]

  """What paramater to use to order the objects by."""
  orderby: [WCConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: Int

  """Specify objects whose parent is in an array"""
  parentIn: [Int]

  """Specify objects whose parent is not in an array"""
  parentNotIn: [Int]

  """Limit results to those matching a string."""
  search: String
}

"""Product catalog visibility enumeration"""
enum CatalogVisibilityEnum {
  CATALOG
  HIDDEN
  SEARCH
  VISIBLE
}

"""The category type"""
type Category implements Node & TermNode & UniformResourceIdentifiable & HierarchicalTermNode {
  """The ancestors of the object"""
  ancestors: [Category]

  """The id field matches the WP_Post-&gt;ID field."""
  categoryId: Int @deprecated(reason: "Deprecated in favor of databaseId")

  """Connection between the category type and the category type"""
  children(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: CategoryToCategoryConnectionWhereArgs
  ): CategoryToCategoryConnection

  """The number of objects connected to the object"""
  count: Int

  """Identifies the primary key from the database."""
  databaseId: Int!

  """The description of the object"""
  description: String

  """Connection between the TermNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): TermNodeToEnqueuedScriptConnection

  """Connection between the TermNode type and the EnqueuedStylesheet type"""
  enqueuedStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): TermNodeToEnqueuedStylesheetConnection

  """The globally unique ID for the object"""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """The parent object"""
  parent: Category

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID

  """Connection between the category type and the category type"""
  parentNode: CategoryToParentCategoryConnectionEdge

  """Connection between the category type and the post type"""
  posts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: CategoryToPostConnectionWhereArgs
  ): CategoryToPostConnection

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """Connection between the category type and the Taxonomy type"""
  taxonomy: CategoryToTaxonomyConnectionEdge

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String!
}

"""
The Type of Identifier used to fetch a single resource. Default is ID.
"""
enum CategoryIdType {
  """The Database ID for the node"""
  DATABASE_ID

  """The hashed Global ID"""
  ID

  """The name of the node"""
  NAME

  """Url friendly name of the node"""
  SLUG

  """The URI for the node"""
  URI
}

"""Connection between the category type and the category type"""
type CategoryToCategoryConnection {
  """Edges for the CategoryToCategoryConnection connection"""
  edges: [CategoryToCategoryConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Category]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type CategoryToCategoryConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Category
}

"""Arguments for filtering the CategoryToCategoryConnection connection"""
input CategoryToCategoryConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the category type and the category type"""
type CategoryToParentCategoryConnectionEdge {
  """The nodes of the connection, without the edges"""
  node: Category
}

"""Connection between the category type and the post type"""
type CategoryToPostConnection {
  """Edges for the CategoryToPostConnection connection"""
  edges: [CategoryToPostConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Post]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type CategoryToPostConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Post
}

"""Arguments for filtering the CategoryToPostConnection connection"""
input CategoryToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Category ID"""
  categoryId: Int

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]

  """Use Category Slug"""
  categoryName: String

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """Tag Slug"""
  tag: String

  """Use Tag ID"""
  tagId: String

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagIn: [ID]

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagNotIn: [ID]

  """Array of tag slugs, used to display objects from one tag OR another"""
  tagSlugAnd: [String]

  """Array of tag slugs, used to exclude objects in specified tags"""
  tagSlugIn: [String]

  """Title of the object"""
  title: String
}

"""Connection between the category type and the Taxonomy type"""
type CategoryToTaxonomyConnectionEdge {
  """The nodes of the connection, without the edges"""
  node: Taxonomy
}

"""A Comment object"""
type Comment implements Node {
  """
  User agent used to post the comment. This field is equivalent to
  WP_Comment-&gt;comment_agent and the value matching the
  &quot;comment_agent&quot; column in SQL.
  """
  agent: String

  """
  The approval status of the comment. This field is equivalent to
  WP_Comment-&gt;comment_approved and the value matching the
  &quot;comment_approved&quot; column in SQL.
  """
  approved: Boolean

  """The author of the comment"""
  author: CommentToCommenterConnectionEdge

  """
  IP address for the author. This field is equivalent to
  WP_Comment-&gt;comment_author_IP and the value matching the
  &quot;comment_author_IP&quot; column in SQL.
  """
  authorIp: String

  """ID for the comment, unique among comments."""
  commentId: Int @deprecated(reason: "Deprecated in favor of databaseId")

  """Connection between the Comment type and the ContentNode type"""
  commentedOn: CommentToContentNodeConnectionEdge

  """
  Content of the comment. This field is equivalent to
  WP_Comment-&gt;comment_content and the value matching the
  &quot;comment_content&quot; column in SQL.
  """
  content(
    """Format of the field output"""
    format: PostObjectFieldFormatEnum
  ): String

  """ID for the comment, unique among comments."""
  databaseId: Int

  """
  Date the comment was posted in local time. This field is equivalent to
  WP_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL.
  """
  date: String

  """
  Date the comment was posted in GMT. This field is equivalent to
  WP_Comment-&gt;date_gmt and the value matching the &quot;date_gmt&quot; column
  """
  dateGmt: String

  """The globally unique identifier for the comment object"""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """
  Karma value for the comment. This field is equivalent to
  WP_Comment-&gt;comment_karma and the value matching the
  &quot;comment_karma&quot; column in SQL.
  """
  karma: Int

  """Connection between the Comment type and the Comment type"""
  parent(
    """Arguments for filtering the connection"""
    where: CommentToParentCommentConnectionWhereArgs
  ): CommentToParentCommentConnectionEdge

  """Connection between the Comment type and the Comment type"""
  replies(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: CommentToCommentConnectionWhereArgs
  ): CommentToCommentConnection

  """
  Type of comment. This field is equivalent to WP_Comment-&gt;comment_type and
  the value matching the &quot;comment_type&quot; column in SQL.
  """
  type: String
}

"""Connection between the Comment type and the Comment type"""
type CommentToCommentConnection {
  """Edges for the CommentToCommentConnection connection"""
  edges: [CommentToCommentConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Comment]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type CommentToCommentConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Comment
}

"""Arguments for filtering the CommentToCommentConnection connection"""
input CommentToCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """Limit results to those affiliated with a given content object ID."""
  contentId: ID

  """Array of content object IDs to include affiliated comments for."""
  contentIdIn: [ID]

  """Array of content object IDs to exclude affiliated comments for."""
  contentIdNotIn: [ID]

  """Content object name to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [ContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be
  returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: OrderEnum

  """Field to order the comments by."""
  orderby: CommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """Array of parent IDs of comments *not* to retrieve children for."""
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Connection between the Comment type and the Commenter type"""
type CommentToCommenterConnectionEdge {
  """The nodes of the connection, without the edges"""
  node: Commenter
}

"""Connection between the Comment type and the ContentNode type"""
type CommentToContentNodeConnectionEdge {
  """The nodes of the connection, without the edges"""
  node: ContentNode
}

"""Connection between the Comment type and the Comment type"""
type CommentToParentCommentConnectionEdge {
  """The nodes of the connection, without the edges"""
  node: Comment
}

"""
Arguments for filtering the CommentToParentCommentConnection connection
"""
input CommentToParentCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """Limit results to those affiliated with a given content object ID."""
  contentId: ID

  """Array of content object IDs to include affiliated comments for."""
  contentIdIn: [ID]

  """Array of content object IDs to exclude affiliated comments for."""
  contentIdNotIn: [ID]

  """Content object name to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [ContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be
  returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: OrderEnum

  """Field to order the comments by."""
  orderby: CommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """Array of parent IDs of comments *not* to retrieve children for."""
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""The author of a comment"""
interface Commenter {
  """Identifies the primary key from the database."""
  databaseId: Int

  """The email address of the author of a comment."""
  email: String

  """The globally unique identifier for the comment author."""
  id: ID!

  """
  Whether the author information is considered restricted. (not fully public)
  """
  isRestricted: Boolean

  """The name of the author of a comment."""
  name: String

  """The url of the author of a comment."""
  url: String
}

"""Options for ordering the connection"""
enum CommentsConnectionOrderbyEnum {
  COMMENT_AGENT
  COMMENT_APPROVED
  COMMENT_AUTHOR
  COMMENT_AUTHOR_EMAIL
  COMMENT_AUTHOR_IP
  COMMENT_AUTHOR_URL
  COMMENT_CONTENT
  COMMENT_DATE
  COMMENT_DATE_GMT
  COMMENT_ID
  COMMENT_IN
  COMMENT_KARMA
  COMMENT_PARENT
  COMMENT_POST_ID
  COMMENT_TYPE
  USER_ID
}

"""Nodes used to manage content"""
interface ContentNode {
  """The ID of the object in the database."""
  databaseId: Int!

  """Post publishing date."""
  date: String

  """The publishing date set in GMT."""
  dateGmt: String

  """The desired slug of the post"""
  desiredSlug: String

  """
  If a user has edited the node within the past 15 seconds, this will return the
  user that last edited. Null if the edit lock doesn't exist or is greater than
  """
  editingLockedBy: ContentNodeToEditLockConnectionEdge

  """The RSS enclosure for the object"""
  enclosure: String

  """Connection between the ContentNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): ContentNodeToEnqueuedScriptConnection

  """
  Connection between the ContentNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): ContentNodeToEnqueuedStylesheetConnection

  """
  The global unique identifier for this post. This currently matches the value
  stored in WP_Post->guid and the guid column in the "post_objects" database
  """
  guid: String

  """The globally unique identifier of the node."""
  id: ID!

  """Whether the object is a node in the preview state"""
  isPreview: Boolean

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """The user that most recently edited the node"""
  lastEditedBy: ContentNodeToEditLastConnectionEdge

  """The permalink of the post"""
  link: String

  """
  The local modified time for a post. If a post was recently updated the
  modified field will change to match the corresponding time.
  """
  modified: String

  """
  The GMT modified time for a post. If a post was recently updated the modified
  field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String

  """The database id of the preview node"""
  previewRevisionDatabaseId: Int

  """Whether the object is a node in the preview state"""
  previewRevisionId: ID

  """
  The uri slug for the post. This is equivalent to the WP_Post->post_name field
  and the post_name column in the database for the "post_objects" table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """Connection between the ContentNode type and the TermNode type"""
  terms(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: ContentNodeToTermNodeConnectionWhereArgs
  ): ContentNodeToTermNodeConnection

  """URI path for the resource"""
  uri: String!
}

"""
The Type of Identifier used to fetch a single resource. Default is ID.
"""
enum ContentNodeIdTypeEnum {
  """Identify a resource by the Database ID."""
  DATABASE_ID

  """Identify a resource by the (hashed) Global ID."""
  ID

  """Identify a resource by the URI."""
  URI
}

"""Connection between the ContentNode type and the User type"""
type ContentNodeToEditLastConnectionEdge {
  """The nodes of the connection, without the edges"""
  node: User
}

"""Connection between the ContentNode type and the User type"""
type ContentNodeToEditLockConnectionEdge {
  """The timestamp for when the node was last edited"""
  lockTimestamp: String

  """The nodes of the connection, without the edges"""
  node: User
}

"""Connection between the ContentNode type and the EnqueuedScript type"""
type ContentNodeToEnqueuedScriptConnection {
  """Edges for the ContentNodeToEnqueuedScriptConnection connection"""
  edges: [ContentNodeToEnqueuedScriptConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [EnqueuedScript]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type ContentNodeToEnqueuedScriptConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: EnqueuedScript
}

"""
Connection between the ContentNode type and the EnqueuedStylesheet type
"""
type ContentNodeToEnqueuedStylesheetConnection {
  """Edges for the ContentNodeToEnqueuedStylesheetConnection connection"""
  edges: [ContentNodeToEnqueuedStylesheetConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [EnqueuedStylesheet]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type ContentNodeToEnqueuedStylesheetConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: EnqueuedStylesheet
}

"""Connection between the ContentNode type and the TermNode type"""
type ContentNodeToTermNodeConnection {
  """Edges for the ContentNodeToTermNodeConnection connection"""
  edges: [ContentNodeToTermNodeConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [TermNode]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type ContentNodeToTermNodeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: TermNode
}

"""
Arguments for filtering the ContentNodeToTermNodeConnection connection
"""
input ContentNodeToTermNodeConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """The Taxonomy to filter terms by"""
  taxonomies: [TaxonomyEnum]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

union ContentRevisionUnion = Post | Page

"""The template assigned to a node of content"""
interface ContentTemplate {
  """The name of the template"""
  templateName: String
}

union ContentTemplateUnion = DefaultTemplate | FullWidthTemplate | HomepageTemplate

"""An Post Type object"""
type ContentType implements Node {
  """Whether this content type should can be exported."""
  canExport: Boolean

  """Connection between the ContentType type and the Taxonomy type"""
  connectedTaxonomies(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): ContentTypeToTaxonomyConnection

  """Connection between the ContentType type and the ContentNode type"""
  contentNodes(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: ContentTypeToContentNodeConnectionWhereArgs
  ): ContentTypeToContentNodeConnection

  """
  Whether content of this type should be deleted when the author of it is deleted from the system.
  """
  deleteWithUser: Boolean

  """Description of the content type."""
  description: String

  """
  Whether to exclude nodes of this content type from front end search results.
  """
  excludeFromSearch: Boolean

  """The plural name of the content type within the GraphQL Schema."""
  graphqlPluralName: String

  """The singular name of the content type within the GraphQL Schema."""
  graphqlSingleName: String

  """
  Whether this content type should have archives. Content archives are generated by type and by date.
  """
  hasArchive: Boolean

  """Whether the content type is hierarchical, for example pages."""
  hierarchical: Boolean

  """The globally unique identifier of the post-type object."""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Display name of the content type."""
  label: String

  """Details about the content type labels."""
  labels: PostTypeLabelDetails

  """The name of the icon file to display as a menu icon."""
  menuIcon: String

  """
  The position of this post type in the menu. Only applies if show_in_menu is true.
  """
  menuPosition: Int

  """
  The internal name of the post type. This should not be used for display purposes.
  """
  name: String

  """
  Whether a content type is intended for use publicly either via the admin
  interface or by front-end users. While the default settings of
  exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are
  inherited from public, each does not rely on this relationship and controls a
  very specific intention.
  """
  public: Boolean

  """
  Whether queries can be performed on the front end for the content type as part of parse_request().
  """
  publiclyQueryable: Boolean

  """
  Name of content type to display in REST API &quot;wp/v2&quot; namespace.
  """
  restBase: String

  """The REST Controller class assigned to handling this content type."""
  restControllerClass: String

  """Makes this content type available via the admin bar."""
  showInAdminBar: Boolean

  """Whether to add the content type to the GraphQL Schema."""
  showInGraphql: Boolean

  """
  Where to show the content type in the admin menu. To work, $show_ui must be
  true. If true, the post type is shown in its own top level menu. If false, no
  menu is shown. If a string of an existing top level menu (eg.
  &quot;tools.php&quot; or &quot;edit.php?post_type=page&quot;), the post type
  will be placed as a sub-menu of that.
  """
  showInMenu: Boolean

  """Makes this content type available for selection in navigation menus."""
  showInNavMenus: Boolean

  """
  Whether the content type is associated with a route under the the REST API &quot;wp/v2&quot; namespace.
  """
  showInRest: Boolean

  """
  Whether to generate and allow a UI for managing this content type in the admin.
  """
  showUi: Boolean
}

"""Allowed Content Types"""
enum ContentTypeEnum {
  """The Type of Content object"""
  ATTACHMENT

  """The Type of Content object"""
  PAGE

  """The Type of Content object"""
  POST
}

"""
The Type of Identifier used to fetch a single Content Type node. To be used along with the "id" field. Default is "ID".
"""
enum ContentTypeIdTypeEnum {
  """The globally unique ID"""
  ID

  """The name of the content type."""
  NAME
}

"""Connection between the ContentType type and the ContentNode type"""
type ContentTypeToContentNodeConnection {
  """Edges for the ContentTypeToContentNodeConnection connection"""
  edges: [ContentTypeToContentNodeConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [ContentNode]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type ContentTypeToContentNodeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ContentNode
}

"""
Arguments for filtering the ContentTypeToContentNodeConnection connection
"""
input ContentTypeToContentNodeConnectionWhereArgs {
  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the ContentType type and the Taxonomy type"""
type ContentTypeToTaxonomyConnection {
  """Edges for the ContentTypeToTaxonomyConnection connection"""
  edges: [ContentTypeToTaxonomyConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Taxonomy]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type ContentTypeToTaxonomyConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Taxonomy
}

"""Countries enumeration"""
enum CountriesEnum {
  AD
  AE
  AF
  AG
  AI
  AL
  AM
  AO
  AQ
  AR
  AS
  AT
  AU
  AW
  AX
  AZ
  BA
  BB
  BD
  BE
  BF
  BG
  BH
  BI
  BJ
  BL
  BM
  BN
  BO
  BQ
  BR
  BS
  BT
  BV
  BW
  BY
  BZ
  CA
  CC
  CD
  CF
  CG
  CH
  CI
  CK
  CL
  CM
  CN
  CO
  CR
  CU
  CV
  CW
  CX
  CY
  CZ
  DE
  DJ
  DK
  DM
  DO
  DZ
  EC
  EE
  EG
  EH
  ER
  ES
  ET
  FI
  FJ
  FK
  FM
  FO
  FR
  GA
  GB
  GD
  GE
  GF
  GG
  GH
  GI
  GL
  GM
  GN
  GP
  GQ
  GR
  GS
  GT
  GU
  GW
  GY
  HK
  HM
  HN
  HR
  HT
  HU
  ID
  IE
  IL
  IM
  IN
  IO
  IQ
  IR
  IS
  IT
  JE
  JM
  JO
  JP
  KE
  KG
  KH
  KI
  KM
  KN
  KP
  KR
  KW
  KY
  KZ
  LA
  LB
  LC
  LI
  LK
  LR
  LS
  LT
  LU
  LV
  LY
  MA
  MC
  MD
  ME
  MF
  MG
  MH
  MK
  ML
  MM
  MN
  MO
  MP
  MQ
  MR
  MS
  MT
  MU
  MV
  MW
  MX
  MY
  MZ
  NA
  NC
  NE
  NF
  NG
  NI
  NL
  NO
  NP
  NR
  NU
  NZ
  OM
  PA
  PE
  PF
  PG
  PH
  PK
  PL
  PM
  PN
  PR
  PS
  PT
  PW
  PY
  QA
  RE
  RO
  RS
  RU
  RW
  SA
  SB
  SC
  SD
  SE
  SG
  SH
  SI
  SJ
  SK
  SL
  SM
  SN
  SO
  SR
  SS
  ST
  SV
  SX
  SY
  SZ
  TC
  TD
  TF
  TG
  TH
  TJ
  TK
  TL
  TM
  TN
  TO
  TR
  TT
  TV
  TW
  TZ
  UA
  UG
  UM
  US
  UY
  UZ
  VA
  VC
  VE
  VG
  VI
  VN
  VU
  WF
  WS
  YE
  YT
  ZA
  ZM
  ZW
}

"""A coupon object"""
type Coupon {
  """Amount off provided by the coupon"""
  amount: Float

  """Coupon code"""
  code: String

  """The Id of the order. Equivalent to WP_Post-&gt;ID"""
  couponId: Int

  """Date coupon created"""
  date: String

  """Date coupon expires"""
  dateExpiry: String

  """Explanation of what the coupon does"""
  description: String

  """Type of discount"""
  discountType: DiscountTypeEnum

  """Only customers with a matching email address can use the coupon"""
  emailRestrictions: [String]

  """
  Excluding sale items mean this coupon cannot be used on items that are on sale (or carts that contain on sale items)
  """
  excludeSaleItems: Boolean

  """Connection between the Coupon type and the ProductCategory type"""
  excludedProductCategories(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: CouponToProductCategoryConnectionWhereArgs
  ): CouponToProductCategoryConnection

  """Connection between the Coupon type and the Product type"""
  excludedProducts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: CouponToProductConnectionWhereArgs
  ): CouponToProductConnection

  """Does this coupon grant free shipping?"""
  freeShipping: Boolean

  """The globally unique identifier for the coupon"""
  id: ID!

  """
  Individual use means this coupon cannot be used in conjunction with other coupons
  """
  individualUse: Boolean

  """
  The number of products in your cart this coupon can apply to (for product discounts)
  """
  limitUsageToXItems: Int

  """Maximum spend amount that must be met before this coupon can be used """
  maximumAmount: Float

  """Minimum spend amount that must be met before this coupon can be used"""
  minimumAmount: Float

  """Date coupon modified"""
  modified: String

  """Connection between the Coupon type and the ProductCategory type"""
  productCategories(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: CouponToProductCategoryConnectionWhereArgs
  ): CouponToProductCategoryConnection

  """Connection between the Coupon type and the Product type"""
  products(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: CouponToProductConnectionWhereArgs
  ): CouponToProductConnection

  """How many times the coupon has been used"""
  usageCount: Int

  """Amount of times this coupon can be used globally"""
  usageLimit: Int

  """Amount of times this coupon can be used by a customer"""
  usageLimitPerUser: Int

  """Connection between the Coupon type and the Customer type"""
  usedBy(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: CouponToCustomerConnectionWhereArgs
  ): CouponToCustomerConnection
}

"""a coupon line object"""
type CouponLine {
  """Line&#039;s Coupon code"""
  code: String

  """Line&#039;s Coupon"""
  coupon: Coupon

  """Line&#039;s Discount total"""
  discount: String

  """Line&#039;s Discount total tax"""
  discountTax: String

  """The Id of the order item."""
  itemId: Int

  """The Id of the order the order item belongs to."""
  orderId: Int
}

"""Connection between the Coupon type and the Customer type"""
type CouponToCustomerConnection {
  """Edges for the CouponToCustomerConnection connection"""
  edges: [CouponToCustomerConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Customer]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type CouponToCustomerConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Customer
}

"""Arguments for filtering the CouponToCustomerConnection connection"""
input CouponToCustomerConnectionWhereArgs {
  """Limit result set to resources with a specific email."""
  email: String

  """Ensure result set excludes specific IDs."""
  exclude: [Int]

  """Limit result set to specific ids."""
  include: [Int]

  """Order of results."""
  order: OrderEnum

  """Order results by a specific field."""
  orderby: CustomerConnectionOrderbyEnum

  """Limit result set to resources with a specific role."""
  role: UserRoleEnum

  """Limit result set to resources with a specific group of roles."""
  roleIn: [UserRoleEnum]

  """Limit result set to resources not within a specific group of roles."""
  roleNotIn: [UserRoleEnum]

  """Limit results to those matching a string."""
  search: String
}

"""Connection between the Coupon type and the ProductCategory type"""
type CouponToProductCategoryConnection {
  """Edges for the CouponToProductCategoryConnection connection"""
  edges: [CouponToProductCategoryConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [ProductCategory]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type CouponToProductCategoryConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ProductCategory
}

"""
Arguments for filtering the CouponToProductCategoryConnection connection
"""
input CouponToProductCategoryConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the Coupon type and the Product type"""
type CouponToProductConnection {
  """Edges for the CouponToProductConnection connection"""
  edges: [CouponToProductConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Product]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type CouponToProductConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Product
}

"""Arguments for filtering the CouponToProductConnection connection"""
input CouponToProductConnectionWhereArgs {
  """
  Limit result set to products with a specific attribute. Use the taxonomy name/attribute slug.
  """
  attribute: String

  """
  Limit result set to products with a specific attribute term ID (required an assigned attribute).
  """
  attributeTerm: String

  """Limit result set to products assigned a specific category name."""
  category: Int

  """
  Limit result set to products assigned to a specific group of category IDs.
  """
  categoryIn: [Int]

  """Limit result set to products assigned a specific category name."""
  categoryName: String

  """
  Limit result set to products assigned to a group of specific categories by name.
  """
  categoryNameIn: [String]

  """
  Limit result set to products not assigned to a group of specific categories by name.
  """
  categoryNameNotIn: [String]

  """
  Limit result set to products not assigned to a specific group of category IDs.
  """
  categoryNotIn: [Int]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """Ensure result set excludes specific IDs."""
  exclude: [Int]

  """Limit result set to featured products."""
  featured: Boolean

  """Limit result set to specific ids."""
  include: [Int]

  """Limit result set to products based on a maximum price."""
  maxPrice: Float

  """Limit result set to products based on a minimum price."""
  minPrice: Float

  """Limit result set to products on sale."""
  onSale: Boolean

  """What paramater to use to order the objects by."""
  orderby: [WCConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: Int

  """Specify objects whose parent is in an array"""
  parentIn: [Int]

  """Specify objects whose parent is not in an array"""
  parentNotIn: [Int]

  """Limit result set to products based on a keyword search."""
  search: String

  """Limit result set to products assigned a specific shipping class ID."""
  shippingClassId: Int

  """
  Limit result set to products with specific SKU(s). Use commas to separate.
  """
  sku: String

  """Limit result set to products with a specific slug."""
  slug: String

  """Limit result set to products assigned a specific status."""
  status: String

  """Limit result set to products in stock or out of stock."""
  stockStatus: [StockStatusEnum]

  """Limit result set to products assigned a specific tag name."""
  tag: String

  """Limit result set to products assigned a specific tag ID."""
  tagId: Int

  """Limit result set to products assigned to a specific group of tag IDs."""
  tagIn: [Int]

  """
  Limit result set to products not assigned to a specific group of tag IDs.
  """
  tagNotIn: [Int]

  """Limit result set to products assigned to a specific group of tag IDs."""
  tagSlugIn: [String]

  """
  Limit result set to products not assigned to a specific group of tag IDs.
  """
  tagSlugNotIn: [String]

  """Limit result set to products assigned a specific type."""
  type: ProductTypesEnum

  """Limit result set to products assigned to a group of specific types."""
  typeIn: [ProductTypesEnum]

  """
  Limit result set to products not assigned to a group of specific types.
  """
  typeNotIn: [ProductTypesEnum]

  """Limit result set to products with a specific visibility level."""
  visibility: CatalogVisibilityEnum
}

"""Input for the createCategory mutation"""
input CreateCategoryInput {
  """The slug that the category will be an alias of"""
  aliasOf: String
  clientMutationId: String!

  """The description of the category object"""
  description: String

  """The name of the category object to mutate"""
  name: String!

  """The ID of the category that should be set as the parent"""
  parentId: ID

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term
  """
  slug: String
}

"""The payload for the createCategory mutation"""
type CreateCategoryPayload {
  """The created category"""
  category: Category
  clientMutationId: String!
}

"""Input for the createComment mutation"""
input CreateCommentInput {
  """User agent used to post the comment."""
  agent: String

  """The approval status of the comment."""
  approved: String

  """The name of the comment's author."""
  author: String

  """The email of the comment's author."""
  authorEmail: String

  """IP address for the comment's author."""
  authorIp: String

  """The url of the comment's author."""
  authorUrl: String
  clientMutationId: String!

  """The ID of the post object the comment belongs to."""
  commentOn: Int

  """Content of the comment."""
  content: String

  """
  The date of the object. Preferable to enter as year/month/day ( e.g.
  01/31/2017 ) as it will rearrange date as fit if it is not specified.
  Incomplete dates may have unintended results for example, "2017" as the input
  will use current date with timestamp 20:17
  """
  date: String

  """Parent comment of current comment."""
  parent: ID

  """Type of comment."""
  type: String

  """The userID of the comment's author."""
  userId: Int
}

"""The payload for the createComment mutation"""
type CreateCommentPayload {
  clientMutationId: String!

  """The comment that was created"""
  comment: Comment

  """
  Whether the mutation succeeded. If the comment is not approved, the server
  will not return the comment to a non authenticated user, but a success message
  can be returned if the create succeeded, and the client can optimistically add
  the comment to the client cache
  """
  success: Boolean
}

"""Input for the createMediaItem mutation"""
input CreateMediaItemInput {
  """Alternative text to display when mediaItem is not displayed"""
  altText: String

  """The userId to assign as the author of the mediaItem"""
  authorId: ID

  """The caption for the mediaItem"""
  caption: String
  clientMutationId: String!

  """The comment status for the mediaItem"""
  commentStatus: String

  """The date of the mediaItem"""
  date: String

  """The date (in GMT zone) of the mediaItem"""
  dateGmt: String

  """Description of the mediaItem"""
  description: String

  """The file name of the mediaItem"""
  filePath: String

  """The file type of the mediaItem"""
  fileType: MimeTypeEnum

  """The WordPress post ID or the graphQL postId of the parent object"""
  parentId: ID

  """The ping status for the mediaItem"""
  pingStatus: String

  """The slug of the mediaItem"""
  slug: String

  """The status of the mediaItem"""
  status: MediaItemStatusEnum

  """The title of the mediaItem"""
  title: String
}

"""The payload for the createMediaItem mutation"""
type CreateMediaItemPayload {
  clientMutationId: String!
  mediaItem: MediaItem
}

"""Input for the createPage mutation"""
input CreatePageInput {
  """The userId to assign as the author of the object"""
  authorId: ID
  clientMutationId: String!

  """The comment status for the object"""
  commentStatus: String

  """The content of the object"""
  content: String

  """
  The date of the object. Preferable to enter as year/month/day (e.g.
  01/31/2017) as it will rearrange date as fit if it is not specified.
  Incomplete dates may have unintended results for example, "2017" as the input
  will use current date with timestamp 20:17
  """
  date: String

  """
  A field used for ordering posts. This is typically used with nav menu items or
  for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """The ID of the parent object"""
  parentId: ID

  """The password used to protect the content of the object"""
  password: String

  """The slug of the object"""
  slug: String

  """The status of the object"""
  status: PostStatusEnum

  """The title of the object"""
  title: String
}

"""The payload for the createPage mutation"""
type CreatePagePayload {
  clientMutationId: String!
  page: Page
}

"""Input for the createPostFormat mutation"""
input CreatePostFormatInput {
  """The slug that the post_format will be an alias of"""
  aliasOf: String
  clientMutationId: String!

  """The description of the post_format object"""
  description: String

  """The name of the post_format object to mutate"""
  name: String!

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term
  """
  slug: String
}

"""The payload for the createPostFormat mutation"""
type CreatePostFormatPayload {
  clientMutationId: String!

  """The created post_format"""
  postFormat: PostFormat
}

"""Input for the createPost mutation"""
input CreatePostInput {
  """The userId to assign as the author of the object"""
  authorId: ID

  """Set connections between the post and categories"""
  categories: PostCategoriesInput
  clientMutationId: String!

  """The comment status for the object"""
  commentStatus: String

  """The content of the object"""
  content: String

  """
  The date of the object. Preferable to enter as year/month/day (e.g.
  01/31/2017) as it will rearrange date as fit if it is not specified.
  Incomplete dates may have unintended results for example, "2017" as the input
  will use current date with timestamp 20:17
  """
  date: String

  """The excerpt of the object"""
  excerpt: String

  """
  A field used for ordering posts. This is typically used with nav menu items or
  for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """The password used to protect the content of the object"""
  password: String

  """The ping status for the object"""
  pingStatus: String

  """URLs that have been pinged."""
  pinged: [String]

  """Set connections between the post and postFormats"""
  postFormats: PostPostFormatsInput

  """The slug of the object"""
  slug: String

  """The status of the object"""
  status: PostStatusEnum

  """Set connections between the post and tags"""
  tags: PostTagsInput

  """The title of the object"""
  title: String

  """URLs queued to be pinged."""
  toPing: [String]
}

"""The payload for the createPost mutation"""
type CreatePostPayload {
  clientMutationId: String!
  post: Post
}

"""Input for the createProductCategory mutation"""
input CreateProductCategoryInput {
  """The slug that the product_cat will be an alias of"""
  aliasOf: String
  clientMutationId: String!

  """The description of the product_cat object"""
  description: String

  """The name of the product_cat object to mutate"""
  name: String!

  """The ID of the product_cat that should be set as the parent"""
  parentId: ID

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term
  """
  slug: String
}

"""The payload for the createProductCategory mutation"""
type CreateProductCategoryPayload {
  clientMutationId: String!

  """The created product_cat"""
  productCategory: ProductCategory
}

"""Input for the createProductTag mutation"""
input CreateProductTagInput {
  """The slug that the product_tag will be an alias of"""
  aliasOf: String
  clientMutationId: String!

  """The description of the product_tag object"""
  description: String

  """The name of the product_tag object to mutate"""
  name: String!

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term
  """
  slug: String
}

"""The payload for the createProductTag mutation"""
type CreateProductTagPayload {
  clientMutationId: String!

  """The created product_tag"""
  productTag: ProductTag
}

"""Input for the createProductType mutation"""
input CreateProductTypeInput {
  """The slug that the product_type will be an alias of"""
  aliasOf: String
  clientMutationId: String!

  """The description of the product_type object"""
  description: String

  """The name of the product_type object to mutate"""
  name: String!

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term
  """
  slug: String
}

"""The payload for the createProductType mutation"""
type CreateProductTypePayload {
  clientMutationId: String!

  """The created product_type"""
  productType: ProductType
}

"""Input for the createShippingClass mutation"""
input CreateShippingClassInput {
  """The slug that the product_shipping_class will be an alias of"""
  aliasOf: String
  clientMutationId: String!

  """The description of the product_shipping_class object"""
  description: String

  """The name of the product_shipping_class object to mutate"""
  name: String!

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term
  """
  slug: String
}

"""The payload for the createShippingClass mutation"""
type CreateShippingClassPayload {
  clientMutationId: String!

  """The created product_shipping_class"""
  shippingClass: ShippingClass
}

"""Input for the createTag mutation"""
input CreateTagInput {
  """The slug that the post_tag will be an alias of"""
  aliasOf: String
  clientMutationId: String!

  """The description of the post_tag object"""
  description: String

  """The name of the post_tag object to mutate"""
  name: String!

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term
  """
  slug: String
}

"""The payload for the createTag mutation"""
type CreateTagPayload {
  clientMutationId: String!

  """The created post_tag"""
  tag: Tag
}

"""Input for the createUser mutation"""
input CreateUserInput {
  """User's AOL IM account."""
  aim: String
  clientMutationId: String!

  """A string containing content about the user."""
  description: String

  """
  A string that will be shown on the site. Defaults to user's username. It is
  likely that you will want to change this, for both appearance and security
  through obscurity (that is if you dont use and delete the default admin user).
  """
  displayName: String

  """A string containing the user's email address."""
  email: String

  """	The user's first name."""
  firstName: String

  """User's Jabber account."""
  jabber: String

  """The user's last name."""
  lastName: String

  """User's locale."""
  locale: String

  """
  A string that contains a URL-friendly name for the user. The default is the user's username.
  """
  nicename: String

  """The user's nickname, defaults to the user's username."""
  nickname: String

  """A string that contains the plain text password for the user."""
  password: String

  """If true, this will refresh the users JWT secret."""
  refreshJwtUserSecret: Boolean

  """The date the user registered. Format is Y-m-d H:i:s."""
  registered: String

  """
  If true, this will revoke the users JWT secret. If false, this will unrevoke
  the JWT secret AND issue a new one. To revoke, the user must have proper
  capabilities to edit users JWT secrets.
  """
  revokeJwtUserSecret: Boolean

  """
  A string for whether to enable the rich editor or not. False if not empty.
  """
  richEditing: String

  """An array of roles to be assigned to the user."""
  roles: [String]

  """A string that contains the user's username for logging in."""
  username: String!

  """A string containing the user's URL for the user's web site."""
  websiteUrl: String

  """User's Yahoo IM account."""
  yim: String
}

"""The payload for the createUser mutation"""
type CreateUserPayload {
  clientMutationId: String!
  user: User
}

"""Input for the createVisibleProduct mutation"""
input CreateVisibleProductInput {
  """The slug that the product_visibility will be an alias of"""
  aliasOf: String
  clientMutationId: String!

  """The description of the product_visibility object"""
  description: String

  """The name of the product_visibility object to mutate"""
  name: String!

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term
  """
  slug: String
}

"""The payload for the createVisibleProduct mutation"""
type CreateVisibleProductPayload {
  clientMutationId: String!

  """The created product_visibility"""
  visibleProduct: VisibleProduct
}

"""A customer object"""
type Customer {
  """Return the date customer billing address properties"""
  billing: CustomerAddress

  """Has customer calculated shipping?"""
  calculatedShipping: Boolean

  """The Id of the user. Equivalent to WP_User-&gt;ID"""
  customerId: Int

  """Return the date customer was created"""
  date: String

  """Return the customer&#039;s display name."""
  displayName: String

  """Return the customer&#039;s email."""
  email: String

  """Return the customer&#039;s first name."""
  firstName: String

  """Has calculated shipping?"""
  hasCalculatedShipping: Boolean

  """The globally unique identifier for the customer"""
  id: ID!

  """Return the date customer was last updated"""
  isPayingCustomer: Boolean

  """Is customer VAT exempt?"""
  isVatExempt: Boolean

  """Return the customer&#039;s last name."""
  lastName: String

  """Gets the customers last order."""
  lastOrder: Order

  """Return the date customer was last updated"""
  modified: String

  """Return the number of orders this customer has."""
  orderCount: Int

  """Connection between the Customer type and the Order type"""
  orders(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: CustomerToOrderConnectionWhereArgs
  ): CustomerToOrderConnection

  """Connection between the Customer type and the Refund type"""
  refunds(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: CustomerToRefundConnectionWhereArgs
  ): CustomerToRefundConnection

  """Return the customer&#039;s user role."""
  role: String

  """Return the date customer shipping address properties"""
  shipping: CustomerAddress

  """Return how much money this customer has spent."""
  totalSpent: Float

  """Return the customer&#039;s username."""
  username: String
}

"""A customer address object"""
type CustomerAddress {
  """Address 1"""
  address1: String

  """Address 2"""
  address2: String

  """City"""
  city: String

  """Company"""
  company: String

  """Country"""
  country: CountriesEnum

  """E-mail"""
  email: String

  """First name"""
  firstName: String

  """Last name"""
  lastName: String

  """Phone"""
  phone: String

  """Zip Postal Code"""
  postcode: String

  """State"""
  state: String
}

"""Customer address information"""
input CustomerAddressInput {
  """Address 1"""
  address1: String

  """Address 2"""
  address2: String

  """City"""
  city: String

  """Company"""
  company: String

  """Country"""
  country: CountriesEnum

  """E-mail"""
  email: String

  """First name"""
  firstName: String

  """Last name"""
  lastName: String

  """Clear old address data"""
  overwrite: Boolean

  """Phone"""
  phone: String

  """Zip Postal Code"""
  postcode: String

  """State"""
  state: String
}

"""Field to order the connection by"""
enum CustomerConnectionOrderbyEnum {
  """Order by customer email"""
  EMAIL

  """Order by customer ID"""
  ID

  """Order by include field"""
  INCLUDE

  """Order by customer display name"""
  NAME

  """Order by customer registration date"""
  REGISTERED_DATE

  """Order by customer username"""
  USERNAME
}

"""Connection between the Customer type and the Order type"""
type CustomerToOrderConnection {
  """Edges for the CustomerToOrderConnection connection"""
  edges: [CustomerToOrderConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Order]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type CustomerToOrderConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Order
}

"""Arguments for filtering the CustomerToOrderConnection connection"""
input CustomerToOrderConnectionWhereArgs {
  """Limit result set to orders assigned a specific customer."""
  customerId: Int

  """Limit result set to orders assigned a specific group of customers."""
  customersIn: [Int]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """Ensure result set excludes specific IDs."""
  exclude: [Int]

  """Limit result set to specific ids."""
  include: [Int]

  """What paramater to use to order the objects by."""
  orderby: [WCConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: Int

  """Specify objects whose parent is in an array"""
  parentIn: [Int]

  """Specify objects whose parent is not in an array"""
  parentNotIn: [Int]

  """Limit result set to orders assigned a specific product."""
  productId: Int

  """Limit results to those matching a string."""
  search: String

  """Limit result set to orders assigned a specific status."""
  statuses: [OrderStatusEnum]
}

"""Connection between the Customer type and the Refund type"""
type CustomerToRefundConnection {
  """Edges for the CustomerToRefundConnection connection"""
  edges: [CustomerToRefundConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Refund]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type CustomerToRefundConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Refund
}

"""Arguments for filtering the CustomerToRefundConnection connection"""
input CustomerToRefundConnectionWhereArgs {
  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """Ensure result set excludes specific IDs."""
  exclude: [Int]

  """Limit result set to specific ids."""
  include: [Int]

  """Limit result set to refunds from a specific group of order IDs."""
  orderIn: [Int]

  """What paramater to use to order the objects by."""
  orderby: [WCConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: Int

  """Specify objects whose parent is in an array"""
  parentIn: [Int]

  """Specify objects whose parent is not in an array"""
  parentNotIn: [Int]

  """Limit results to those matching a string."""
  search: String

  """Limit result set to refunds assigned a specific status."""
  statuses: [String]
}

"""Date values"""
input DateInput {
  """Day of the month (from 1 to 31)"""
  day: Int

  """Month number (from 1 to 12)"""
  month: Int

  """4 digit year (e.g. 2017)"""
  year: Int
}

"""Filter the connection based on input"""
input DateQueryInput {
  """Nodes should be returned after this date"""
  after: DateInput

  """Nodes should be returned before this date"""
  before: DateInput

  """Column to query against"""
  column: PostObjectsConnectionDateColumnEnum

  """For after/before, whether exact value should be matched or not"""
  compare: String

  """Day of the month (from 1 to 31)"""
  day: Int

  """Hour (from 0 to 23)"""
  hour: Int

  """For after/before, whether exact value should be matched or not"""
  inclusive: Boolean

  """Minute (from 0 to 59)"""
  minute: Int

  """Month number (from 1 to 12)"""
  month: Int

  """OR or AND, how the sub-arrays should be compared"""
  relation: RelationEnum

  """Second (0 to 59)"""
  second: Int

  """Week of the year (from 0 to 53)"""
  week: Int

  """4 digit year (e.g. 2017)"""
  year: Int
}

"""The template assigned to the node"""
type DefaultTemplate implements ContentTemplate {
  """The name of the template"""
  templateName: String
}

"""Input for the deleteCategory mutation"""
input DeleteCategoryInput {
  clientMutationId: String!

  """The ID of the category to delete"""
  id: ID!
}

"""The payload for the deleteCategory mutation"""
type DeleteCategoryPayload {
  """The deteted term object"""
  category: Category
  clientMutationId: String!

  """The ID of the deleted object"""
  deletedId: ID
}

"""Input for the deleteComment mutation"""
input DeleteCommentInput {
  clientMutationId: String!

  """
  Whether the comment should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean

  """The deleted comment ID"""
  id: ID!
}

"""The payload for the deleteComment mutation"""
type DeleteCommentPayload {
  clientMutationId: String!

  """The deleted comment object"""
  comment: Comment

  """The deleted comment ID"""
  deletedId: ID
}

"""Input for the deleteMediaItem mutation"""
input DeleteMediaItemInput {
  clientMutationId: String!

  """
  Whether the mediaItem should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean

  """The ID of the mediaItem to delete"""
  id: ID!
}

"""The payload for the deleteMediaItem mutation"""
type DeleteMediaItemPayload {
  clientMutationId: String!

  """The ID of the deleted mediaItem"""
  deletedId: ID

  """The mediaItem before it was deleted"""
  mediaItem: MediaItem
}

"""Input for the deletePage mutation"""
input DeletePageInput {
  clientMutationId: String!

  """
  Whether the object should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean

  """The ID of the page to delete"""
  id: ID!
}

"""The payload for the deletePage mutation"""
type DeletePagePayload {
  clientMutationId: String!

  """The ID of the deleted object"""
  deletedId: ID

  """The object before it was deleted"""
  page: Page
}

"""Input for the deletePostFormat mutation"""
input DeletePostFormatInput {
  clientMutationId: String!

  """The ID of the postFormat to delete"""
  id: ID!
}

"""The payload for the deletePostFormat mutation"""
type DeletePostFormatPayload {
  clientMutationId: String!

  """The ID of the deleted object"""
  deletedId: ID

  """The deteted term object"""
  postFormat: PostFormat
}

"""Input for the deletePost mutation"""
input DeletePostInput {
  clientMutationId: String!

  """
  Whether the object should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean

  """The ID of the post to delete"""
  id: ID!
}

"""The payload for the deletePost mutation"""
type DeletePostPayload {
  clientMutationId: String!

  """The ID of the deleted object"""
  deletedId: ID

  """The object before it was deleted"""
  post: Post
}

"""Input for the deleteProductCategory mutation"""
input DeleteProductCategoryInput {
  clientMutationId: String!

  """The ID of the productCategory to delete"""
  id: ID!
}

"""The payload for the deleteProductCategory mutation"""
type DeleteProductCategoryPayload {
  clientMutationId: String!

  """The ID of the deleted object"""
  deletedId: ID

  """The deteted term object"""
  productCategory: ProductCategory
}

"""Input for the deleteProductTag mutation"""
input DeleteProductTagInput {
  clientMutationId: String!

  """The ID of the productTag to delete"""
  id: ID!
}

"""The payload for the deleteProductTag mutation"""
type DeleteProductTagPayload {
  clientMutationId: String!

  """The ID of the deleted object"""
  deletedId: ID

  """The deteted term object"""
  productTag: ProductTag
}

"""Input for the deleteProductType mutation"""
input DeleteProductTypeInput {
  clientMutationId: String!

  """The ID of the productType to delete"""
  id: ID!
}

"""The payload for the deleteProductType mutation"""
type DeleteProductTypePayload {
  clientMutationId: String!

  """The ID of the deleted object"""
  deletedId: ID

  """The deteted term object"""
  productType: ProductType
}

"""Input for the deleteShippingClass mutation"""
input DeleteShippingClassInput {
  clientMutationId: String!

  """The ID of the shippingClass to delete"""
  id: ID!
}

"""The payload for the deleteShippingClass mutation"""
type DeleteShippingClassPayload {
  clientMutationId: String!

  """The ID of the deleted object"""
  deletedId: ID

  """The deteted term object"""
  shippingClass: ShippingClass
}

"""Input for the deleteTag mutation"""
input DeleteTagInput {
  clientMutationId: String!

  """The ID of the tag to delete"""
  id: ID!
}

"""The payload for the deleteTag mutation"""
type DeleteTagPayload {
  clientMutationId: String!

  """The ID of the deleted object"""
  deletedId: ID

  """The deteted term object"""
  tag: Tag
}

"""Input for the deleteUser mutation"""
input DeleteUserInput {
  clientMutationId: String!

  """The ID of the user you want to delete"""
  id: ID!

  """Reassign posts and links to new User ID."""
  reassignId: ID
}

"""The payload for the deleteUser mutation"""
type DeleteUserPayload {
  clientMutationId: String!

  """The ID of the user that you just deleted"""
  deletedId: ID

  """The deleted user object"""
  user: User
}

"""Input for the deleteVisibleProduct mutation"""
input DeleteVisibleProductInput {
  clientMutationId: String!

  """The ID of the visibleProduct to delete"""
  id: ID!
}

"""The payload for the deleteVisibleProduct mutation"""
type DeleteVisibleProductPayload {
  clientMutationId: String!

  """The ID of the deleted object"""
  deletedId: ID

  """The deteted term object"""
  visibleProduct: VisibleProduct
}

"""Coupon discount type enumeration"""
enum DiscountTypeEnum {
  FIXED_CART
  FIXED_PRODUCT
  PERCENT
}

"""The discussion setting type"""
type DiscussionSettings {
  """Allow people to submit comments on new posts."""
  defaultCommentStatus: String

  """
  Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.
  """
  defaultPingStatus: String
}

"""Input for the emptyCart mutation"""
input EmptyCartInput {
  clientMutationId: String!
}

"""The payload for the emptyCart mutation"""
type EmptyCartPayload {
  cart: Cart
  clientMutationId: String!
}

"""Asset enqueued by the CMS"""
interface EnqueuedAsset {
  """@todo"""
  args: Boolean

  """Dependencies needed to use this asset"""
  dependencies: [EnqueuedScript]

  """Extra information needed for the script"""
  extra: String

  """The handle of the enqueued asset"""
  handle: String

  """The ID of the enqueued asset"""
  id: ID!

  """The source of the asset"""
  src: String

  """The version of the enqueued asset"""
  version: String
}

"""Script enqueued by the CMS"""
type EnqueuedScript implements Node & EnqueuedAsset {
  """@todo"""
  args: Boolean

  """Dependencies needed to use this asset"""
  dependencies: [EnqueuedScript]

  """Extra information needed for the script"""
  extra: String

  """The handle of the enqueued asset"""
  handle: String

  """The globally unique ID for the object"""
  id: ID!

  """The source of the asset"""
  src: String

  """The version of the enqueued asset"""
  version: String
}

"""Stylesheet enqueued by the CMS"""
type EnqueuedStylesheet implements Node & EnqueuedAsset {
  """@todo"""
  args: Boolean

  """Dependencies needed to use this asset"""
  dependencies: [EnqueuedScript]

  """Extra information needed for the script"""
  extra: String

  """The handle of the enqueued asset"""
  handle: String

  """The globally unique ID for the object"""
  id: ID!

  """The source of the asset"""
  src: String

  """The version of the enqueued asset"""
  version: String
}

"""a fee line object"""
type FeeLine {
  """Fee amount"""
  amount: String

  """The Id of the order item."""
  itemId: Int

  """Fee name"""
  name: String

  """The Id of the order the order item belongs to."""
  orderId: Int

  """Line tax class"""
  taxClass: TaxClassEnum

  """Tax status of fee"""
  taxStatus: TaxStatusEnum

  """Line taxes"""
  taxes: [OrderItemTax]

  """Line total (after discounts)"""
  total: String

  """Line total tax (after discounts)"""
  totalTax: String
}

"""The template assigned to the node"""
type FullWidthTemplate implements ContentTemplate {
  """The name of the template"""
  templateName: String
}

"""The general setting type"""
type GeneralSettings {
  """A date format for all date strings."""
  dateFormat: String

  """Site tagline."""
  description: String

  """This address is used for admin purposes, like new user notification."""
  email: String

  """WordPress locale code."""
  language: String

  """A day number of the week that the week should start on."""
  startOfWeek: Int

  """A time format for all time strings."""
  timeFormat: String

  """A city in the same timezone as you."""
  timezone: String

  """Site title."""
  title: String

  """Site URL."""
  url: String
}

"""Content node with hierarchical (parent/child) relationships"""
interface HierarchicalContentNode {
  """
  Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): HierarchicalContentNodeToContentNodeConnection

  """
  Connection between the HierarchicalContentNode type and the ContentNode type
  """
  children(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): HierarchicalContentNodeToContentNodeConnection

  """The parent of the node. The parent object can be of various types"""
  parent: HierarchicalContentNodeToContentNodeConnectionEdge

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID
}

"""
Connection between the HierarchicalContentNode type and the ContentNode type
"""
type HierarchicalContentNodeToContentNodeConnection {
  """
  Edges for the HierarchicalContentNodeToContentNodeConnection connection
  """
  edges: [HierarchicalContentNodeToContentNodeConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [ContentNode]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""
Connection between the HierarchicalContentNode type and the ContentNode type
"""
type HierarchicalContentNodeToContentNodeConnectionEdge {
  """The nodes of the connection, without the edges"""
  node: ContentNode
}

"""Term node with hierarchical (parent/child) relationships"""
interface HierarchicalTermNode {
  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID
}

"""The template assigned to the node"""
type HomepageTemplate implements ContentTemplate {
  """The name of the template"""
  templateName: String
}

"""a line item object"""
type LineItem {
  """Line item&#039;s taxes"""
  itemDownloads: [ProductDownload]

  """The Id of the order item."""
  itemId: Int

  """The Id of the order the order item belongs to."""
  orderId: Int

  """Line item&#039;s product object"""
  product: Product

  """Line item&#039;s product ID"""
  productId: Int

  """Line item&#039;s product quantity"""
  quantity: Int

  """Line item&#039;s subtotal"""
  subtotal: String

  """Line item&#039;s subtotal tax"""
  subtotalTax: String

  """Line item&#039;s tax class"""
  taxClass: TaxClassEnum

  """Line item&#039;s taxes"""
  taxStatus: TaxStatusEnum

  """Line item&#039;s taxes"""
  taxes: [OrderItemTax]

  """Line item&#039;s total"""
  total: String

  """Line item&#039;s total tax"""
  totalTax: String

  """Line item&#039;s product variation object"""
  variation: ProductVariation

  """Line item&#039;s product variation ID"""
  variationId: Int
}

"""Input for the login mutation"""
input LoginInput {
  clientMutationId: String!

  """The plain-text password for the user logging in."""
  password: String!

  """
  The username used for login. Typically a unique or email address depending on specific configuration
  """
  username: String!
}

"""The payload for the login mutation"""
type LoginPayload {
  """JWT Token that can be used in future requests for Authentication"""
  authToken: String
  clientMutationId: String!

  """
  A JWT token that can be used in future requests to get a refreshed
  jwtAuthToken. If the refresh token used in a request is revoked or otherwise
  invalid, a valid Auth token will NOT be issued in the response headers.
  """
  refreshToken: String

  """The user that was logged in"""
  user: User
}

"""Product manage stock enumeration"""
enum ManageStockEnum {
  FALSE
  PARENT
  TRUE
}

"""File details for a Media Item"""
type MediaDetails {
  """The height of the mediaItem"""
  file: String

  """The height of the mediaItem"""
  height: Int
  meta: MediaItemMeta

  """The available sizes of the mediaItem"""
  sizes: [MediaSize]

  """The width of the mediaItem"""
  width: Int
}

"""The mediaItem type"""
type MediaItem implements Node & ContentNode & UniformResourceIdentifiable & NodeWithTitle & NodeWithAuthor & NodeWithComments & HierarchicalContentNode {
  """Alternative text to display when resource is not displayed"""
  altText: String

  """
  Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): HierarchicalContentNodeToContentNodeConnection

  """Connection between the NodeWithAuthor type and the User type"""
  author: NodeWithAuthorToUserConnectionEdge

  """The database identifier of the author of the node"""
  authorDatabaseId: Int

  """The globally unique identifier of the author of the node"""
  authorId: ID

  """The caption for the resource"""
  caption(
    """Format of the field output"""
    format: PostObjectFieldFormatEnum
  ): String

  """
  Connection between the HierarchicalContentNode type and the ContentNode type
  """
  children(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): HierarchicalContentNodeToContentNodeConnection

  """
  The number of comments. Even though WPGraphQL denotes this field as an
  integer, in WordPress this field should be saved as a numeric string for
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String

  """Connection between the mediaItem type and the Comment type"""
  comments(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: MediaItemToCommentConnectionWhereArgs
  ): MediaItemToCommentConnection

  """Connection between the mediaItem type and the ContentType type"""
  contentType: MediaItemToContentTypeConnectionEdge

  """The ID of the object in the database."""
  databaseId: Int!

  """Post publishing date."""
  date: String

  """The publishing date set in GMT."""
  dateGmt: String

  """Description of the image (stored as post_content)"""
  description(
    """Format of the field output"""
    format: PostObjectFieldFormatEnum
  ): String

  """The desired slug of the post"""
  desiredSlug: String

  """
  If a user has edited the node within the past 15 seconds, this will return the
  user that last edited. Null if the edit lock doesn&#039;t exist or is greater
  than 15 seconds
  """
  editingLockedBy: ContentNodeToEditLockConnectionEdge

  """The RSS enclosure for the object"""
  enclosure: String

  """Connection between the ContentNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): ContentNodeToEnqueuedScriptConnection

  """
  Connection between the ContentNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): ContentNodeToEnqueuedStylesheetConnection

  """
  The global unique identifier for this post. This currently matches the value
  stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot;
  database table.
  """
  guid: String

  """The globally unique identifier of the attachment object."""
  id: ID!

  """Whether the object is a node in the preview state"""
  isPreview: Boolean

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """The user that most recently edited the node"""
  lastEditedBy: ContentNodeToEditLastConnectionEdge

  """The permalink of the post"""
  link: String

  """Details about the mediaItem"""
  mediaDetails: MediaDetails

  """The id field matches the WP_Post-&gt;ID field."""
  mediaItemId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")

  """Url of the mediaItem"""
  mediaItemUrl: String

  """Type of resource"""
  mediaType: String

  """The mime type of the mediaItem"""
  mimeType: String

  """
  The local modified time for a post. If a post was recently updated the
  modified field will change to match the corresponding time.
  """
  modified: String

  """
  The GMT modified time for a post. If a post was recently updated the modified
  field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String

  """The parent of the node. The parent object can be of various types"""
  parent: HierarchicalContentNodeToContentNodeConnectionEdge

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID

  """The database id of the preview node"""
  previewRevisionDatabaseId: Int

  """Whether the object is a node in the preview state"""
  previewRevisionId: ID

  """The sizes attribute value for an image."""
  sizes(
    """Size of the MediaItem to calculate sizes with"""
    size: MediaItemSizeEnum
  ): String

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name
  field and the post_name column in the database for the
  &quot;post_objects&quot; table.
  """
  slug: String

  """Url of the mediaItem"""
  sourceUrl(
    """Size of the MediaItem to return"""
    size: MediaItemSizeEnum
  ): String

  """
  The srcset attribute specifies the URL of the image to use in different
  situations. It is a comma separated string of urls and their widths.
  """
  srcSet(
    """Size of the MediaItem to calculate srcSet with"""
    size: MediaItemSizeEnum
  ): String

  """The current status of the object"""
  status: String

  """The template assigned to the node"""
  template: ContentTemplateUnion

  """Connection between the ContentNode type and the TermNode type"""
  terms(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: ContentNodeToTermNodeConnectionWhereArgs
  ): ContentNodeToTermNodeConnection

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """Format of the field output"""
    format: PostObjectFieldFormatEnum
  ): String

  """URI path for the resource"""
  uri: String!
}

"""
The Type of Identifier used to fetch a single resource. Default is ID.
"""
enum MediaItemIdType {
  """Identify a resource by the Database ID."""
  DATABASE_ID

  """Identify a resource by the (hashed) Global ID."""
  ID

  """Identify a resource by the URI."""
  URI

  """
  Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier.
  """
  SLUG

  """Identify a media item by its source url"""
  SOURCE_URL
}

"""Meta connected to a MediaItem"""
type MediaItemMeta {
  aperture: Float
  camera: String
  caption: String
  copyright: String
  createdTimestamp: Int
  credit: String
  focalLength: Int
  iso: Int
  keywords: [String]
  orientation: String
  shutterSpeed: Float
  title: String
}

"""The size of the media item object."""
enum MediaItemSizeEnum {
  """MediaItem with the large size"""
  LARGE

  """MediaItem with the medium size"""
  MEDIUM

  """MediaItem with the medium_large size"""
  MEDIUM_LARGE

  """MediaItem with the shop_catalog size"""
  SHOP_CATALOG

  """MediaItem with the shop_single size"""
  SHOP_SINGLE

  """MediaItem with the shop_thumbnail size"""
  SHOP_THUMBNAIL

  """MediaItem with the thumbnail size"""
  THUMBNAIL

  """MediaItem with the woocommerce_gallery_thumbnail size"""
  WOOCOMMERCE_GALLERY_THUMBNAIL

  """MediaItem with the woocommerce_single size"""
  WOOCOMMERCE_SINGLE

  """MediaItem with the woocommerce_thumbnail size"""
  WOOCOMMERCE_THUMBNAIL

  """MediaItem with the 1536x1536 size"""
  _1536X1536

  """MediaItem with the 2048x2048 size"""
  _2048X2048
}

"""The status of the media item object."""
enum MediaItemStatusEnum {
  """Objects with the auto-draft status"""
  AUTO_DRAFT

  """Objects with the inherit status"""
  INHERIT

  """Objects with the private status"""
  PRIVATE

  """Objects with the trash status"""
  TRASH
}

"""Connection between the mediaItem type and the Comment type"""
type MediaItemToCommentConnection {
  """Edges for the MediaItemToCommentConnection connection"""
  edges: [MediaItemToCommentConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Comment]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type MediaItemToCommentConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Comment
}

"""Arguments for filtering the MediaItemToCommentConnection connection"""
input MediaItemToCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """Limit results to those affiliated with a given content object ID."""
  contentId: ID

  """Array of content object IDs to include affiliated comments for."""
  contentIdIn: [ID]

  """Array of content object IDs to exclude affiliated comments for."""
  contentIdNotIn: [ID]

  """Content object name to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [ContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be
  returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: OrderEnum

  """Field to order the comments by."""
  orderby: CommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """Array of parent IDs of comments *not* to retrieve children for."""
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Connection between the mediaItem type and the ContentType type"""
type MediaItemToContentTypeConnectionEdge {
  """The nodes of the connection, without the edges"""
  node: ContentType
}

"""Details of an available size for a media item"""
type MediaSize {
  """The file of the for the referenced size"""
  file: String

  """The height of the for the referenced size"""
  height: String

  """The mime type of the resource"""
  mimeType: String

  """The referenced size name"""
  name: String

  """The url of the for the referenced size"""
  sourceUrl: String

  """The width of the for the referenced size"""
  width: String
}

"""
Menus are the containers for navigation items. Menus can be assigned to menu
locations, which are typically registered by the active theme.
"""
type Menu implements Node {
  """The number of items in the menu"""
  count: Int

  """The globally unique identifier of the nav menu object."""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """WP ID of the nav menu."""
  menuId: Int

  """Connection between the Menu type and the MenuItem type"""
  menuItems(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: MenuToMenuItemConnectionWhereArgs
  ): MenuToMenuItemConnection

  """Display name of the menu. Equivalent to WP_Term-&gt;name."""
  name: String

  """The url friendly name of the menu. Equivalent to WP_Term-&gt;slug"""
  slug: String
}

"""
Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu.
"""
type MenuItem implements Node {
  """Connection between the MenuItem type and the MenuItem type"""
  childItems(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: MenuItemToMenuItemConnectionWhereArgs
  ): MenuItemToMenuItemConnection

  """The object connected to this menu item."""
  connectedObject: MenuItemObjectUnion

  """Class attribute for the menu item link"""
  cssClasses: [String]

  """WP ID of the menu item."""
  databaseId: Int

  """Description of the menu item."""
  description: String

  """The globally unique identifier of the nav menu item object."""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Label or title of the menu item."""
  label: String

  """Link relationship (XFN) of the menu item."""
  linkRelationship: String

  """WP ID of the menu item."""
  menuItemId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")

  """Menu item order"""
  order: Int

  """The database id of the parent menu item or null if it is the root"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent nav menu item object."""
  parentId: ID

  """Target attribute for the menu item link."""
  target: String

  """Title attribute for the menu item link"""
  title: String

  """URL or destination of the menu item."""
  url: String
}

union MenuItemObjectUnion = Post | Page | Category | Tag | ProductCategory | ProductTag | MenuItem

"""Connection between the MenuItem type and the MenuItem type"""
type MenuItemToMenuItemConnection {
  """Edges for the MenuItemToMenuItemConnection connection"""
  edges: [MenuItemToMenuItemConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [MenuItem]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type MenuItemToMenuItemConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: MenuItem
}

"""Arguments for filtering the MenuItemToMenuItemConnection connection"""
input MenuItemToMenuItemConnectionWhereArgs {
  """The ID of the object"""
  id: Int

  """The menu location for the menu being queried"""
  location: MenuLocationEnum

  """The database ID of the parent menu object"""
  parentDatabaseId: Int

  """The ID of the parent menu object"""
  parentId: ID
}

"""Registered menu locations"""
enum MenuLocationEnum {
  HANDHELD
  PRIMARY
  SECONDARY
}

"""Connection between the Menu type and the MenuItem type"""
type MenuToMenuItemConnection {
  """Edges for the MenuToMenuItemConnection connection"""
  edges: [MenuToMenuItemConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [MenuItem]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type MenuToMenuItemConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: MenuItem
}

"""Arguments for filtering the MenuToMenuItemConnection connection"""
input MenuToMenuItemConnectionWhereArgs {
  """The ID of the object"""
  id: Int

  """The menu location for the menu being queried"""
  location: MenuLocationEnum

  """The database ID of the parent menu object"""
  parentDatabaseId: Int

  """The ID of the parent menu object"""
  parentId: ID
}

"""The MimeType of the object"""
enum MimeTypeEnum {
  APPLICATION_JAVA
  APPLICATION_MSWORD
  APPLICATION_OCTET_STREAM
  APPLICATION_ONENOTE
  APPLICATION_OXPS
  APPLICATION_PDF
  APPLICATION_RAR
  APPLICATION_RTF
  APPLICATION_TTAF_XML
  APPLICATION_VND_APPLE_KEYNOTE
  APPLICATION_VND_APPLE_NUMBERS
  APPLICATION_VND_APPLE_PAGES
  APPLICATION_VND_MS_ACCESS
  APPLICATION_VND_MS_EXCEL
  APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12
  APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12
  APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12
  APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12
  APPLICATION_VND_MS_POWERPOINT
  APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12
  APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12
  APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12
  APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12
  APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12
  APPLICATION_VND_MS_PROJECT
  APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12
  APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12
  APPLICATION_VND_MS_WRITE
  APPLICATION_VND_MS_XPSDOCUMENT
  APPLICATION_VND_OASIS_OPENDOCUMENT_CHART
  APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE
  APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA
  APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS
  APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION
  APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET
  APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE
  APPLICATION_WORDPERFECT
  APPLICATION_X_7Z_COMPRESSED
  APPLICATION_X_GZIP
  APPLICATION_X_TAR
  APPLICATION_ZIP
  AUDIO_AAC
  AUDIO_FLAC
  AUDIO_MIDI
  AUDIO_MPEG
  AUDIO_OGG
  AUDIO_WAV
  AUDIO_X_MATROSKA
  AUDIO_X_MS_WAX
  AUDIO_X_MS_WMA
  AUDIO_X_REALAUDIO
  IMAGE_BMP
  IMAGE_GIF
  IMAGE_JPEG
  IMAGE_PNG
  IMAGE_TIFF
  IMAGE_X_ICON
  TEXT_CALENDAR
  TEXT_CSS
  TEXT_CSV
  TEXT_PLAIN
  TEXT_RICHTEXT
  TEXT_TAB_SEPARATED_VALUES
  TEXT_VTT
  VIDEO_3GPP
  VIDEO_3GPP2
  VIDEO_AVI
  VIDEO_DIVX
  VIDEO_MP4
  VIDEO_MPEG
  VIDEO_OGG
  VIDEO_QUICKTIME
  VIDEO_WEBM
  VIDEO_X_FLV
  VIDEO_X_MATROSKA
  VIDEO_X_MS_ASF
  VIDEO_X_MS_WM
  VIDEO_X_MS_WMV
  VIDEO_X_MS_WMX
}

"""An object with an ID"""
interface Node {
  """The globally unique ID for the object"""
  id: ID!
}

"""A node that can have an author assigned to it"""
interface NodeWithAuthor {
  """Connection between the NodeWithAuthor type and the User type"""
  author: NodeWithAuthorToUserConnectionEdge

  """The database identifier of the author of the node"""
  authorDatabaseId: Int

  """The globally unique identifier of the author of the node"""
  authorId: ID
}

"""Connection between the NodeWithAuthor type and the User type"""
type NodeWithAuthorToUserConnectionEdge {
  """The nodes of the connection, without the edges"""
  node: User
}

"""A node that can have comments associated with it"""
interface NodeWithComments {
  """
  The number of comments. Even though WPGraphQL denotes this field as an
  integer, in WordPress this field should be saved as a numeric string for
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String
}

"""A node that supports the content editor"""
interface NodeWithContentEditor {
  """The content of the post."""
  content(
    """Format of the field output"""
    format: PostObjectFieldFormatEnum
  ): String
}

"""A node that can have an excerpt"""
interface NodeWithExcerpt {
  """The excerpt of the post."""
  excerpt(
    """Format of the field output"""
    format: PostObjectFieldFormatEnum
  ): String
}

"""A node that can have a featured image set"""
interface NodeWithFeaturedImage {
  """
  Connection between the NodeWithFeaturedImage type and the MediaItem type
  """
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge

  """
  The database identifier for the featured image node assigned to the content node
  """
  featuredImageDatabaseId: Int

  """Globally unique ID of the featured image assigned to the node"""
  featuredImageId: ID
}

"""
Connection between the NodeWithFeaturedImage type and the MediaItem type
"""
type NodeWithFeaturedImageToMediaItemConnectionEdge {
  """The nodes of the connection, without the edges"""
  node: MediaItem
}

"""A node that can have page attributes"""
interface NodeWithPageAttributes {
  """
  A field used for ordering posts. This is typically used with nav menu items or
  for special ordering of hierarchical content types.
  """
  menuOrder: Int
}

"""A node that can have revisions"""
interface NodeWithRevisions {
  """True if the node is a revision of another node"""
  isRevision: Boolean

  """
  If the current node is a revision, this field exposes the node this is a
  revision of. Returns null if the node is not a revision of another node.
  """
  revisionOf: NodeWithRevisionsToContentNodeConnectionEdge
}

"""
Connection between the NodeWithRevisions type and the ContentNode type
"""
type NodeWithRevisionsToContentNodeConnectionEdge {
  """The nodes of the connection, without the edges"""
  node: ContentNode
}

"""A node that NodeWith a title"""
interface NodeWithTitle {
  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """Format of the field output"""
    format: PostObjectFieldFormatEnum
  ): String
}

"""A node that can have trackbacks and pingbacks"""
interface NodeWithTrackbacks {
  """Whether the pings are open or closed for this particular post."""
  pingStatus: String

  """URLs that have been pinged."""
  pinged: [String]

  """URLs queued to be pinged."""
  toPing: [String]
}

"""A order object"""
type Order {
  """Order billing properties"""
  billing: CustomerAddress

  """Cart hash"""
  cartHash: String

  """Cart tax amount"""
  cartTax: Float

  """Connection between the Order type and the CouponLine type"""
  couponLines(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): OrderToCouponLineConnection

  """How order was created"""
  createdVia: String

  """Order currency"""
  currency: String

  """Order customer"""
  customer: Customer

  """Customer IP Address"""
  customerIpAddress: String

  """Customer note"""
  customerNote: String

  """Customer User Agent"""
  customerUserAgent: String

  """Date order was created"""
  date: String

  """Date order was completed"""
  dateCompleted: String

  """Date order was paid"""
  datePaid: String

  """Discount tax amount"""
  discountTax: Float

  """Discount total amount"""
  discountTotal: Float

  """Product downloads"""
  downloadableItems: [ProductDownload]

  """Connection between the Order type and the FeeLine type"""
  feeLines(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): OrderToFeeLineConnection

  """Order has a billing address?"""
  hasBillingAddress: Boolean

  """If order contains a downloadable product"""
  hasDownloadableItem: Boolean

  """Order has a shipping address?"""
  hasShippingAddress: Boolean

  """The globally unique identifier for the order"""
  id: ID!

  """Is product download is permitted"""
  isDownloadPermitted: Boolean

  """Connection between the Order type and the LineItem type"""
  lineItems(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): OrderToLineItemConnection

  """Date order was last updated"""
  modified: String

  """If order needs payment"""
  needsPayment: Boolean

  """If order needs processing before it can be completed"""
  needsProcessing: Boolean

  """If order needs shipping address"""
  needsShippingAddress: Boolean

  """The Id of the order. Equivalent to WP_Post-&gt;ID"""
  orderId: Int

  """Order key"""
  orderKey: String

  """Order number"""
  orderNumber: String

  """Order version"""
  orderVersion: String

  """Parent order"""
  parent: Order

  """Payment method"""
  paymentMethod: String

  """Payment method title"""
  paymentMethodTitle: String

  """Prices include taxes?"""
  pricesIncludeTax: Boolean

  """Connection between the Order type and the Refund type"""
  refunds(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: OrderToRefundConnectionWhereArgs
  ): OrderToRefundConnection

  """Order shipping properties"""
  shipping: CustomerAddress

  """Order customer"""
  shippingAddressMapUrl: String

  """Connection between the Order type and the ShippingLine type"""
  shippingLines(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): OrderToShippingLineConnection

  """Shipping tax amount"""
  shippingTax: Float

  """Shipping total amount"""
  shippingTotal: Float

  """Order status"""
  status: OrderStatusEnum

  """Order subtotal"""
  subtotal: Float

  """Connection between the Order type and the TaxLine type"""
  taxLines(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): OrderToTaxLineConnection

  """Order grand total"""
  total: Float

  """Order taxes"""
  totalTax: Float

  """Transaction ID"""
  transactionId: String
}

"""The cardinality of the connection order"""
enum OrderEnum {
  ASC
  DESC
}

"""Order item tax statement"""
type OrderItemTax {
  """Amount taxed"""
  amount: Float

  """Subtotal"""
  subtotal: Float

  """Tax line connected to this statement"""
  taxLine: TaxLine

  """Order item ID for tax line connected to this statement"""
  taxLineId: Int!

  """Total"""
  total: Float
}

"""Order status enumeration"""
enum OrderStatusEnum {
  CANCELLED
  COMPLETED
  FAILED
  ON_HOLD
  PENDING
  PROCESSING
  REFUNDED
}

"""Connection between the Order type and the CouponLine type"""
type OrderToCouponLineConnection {
  """Edges for the OrderToCouponLineConnection connection"""
  edges: [OrderToCouponLineConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [CouponLine]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type OrderToCouponLineConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: CouponLine
}

"""Connection between the Order type and the FeeLine type"""
type OrderToFeeLineConnection {
  """Edges for the OrderToFeeLineConnection connection"""
  edges: [OrderToFeeLineConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [FeeLine]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type OrderToFeeLineConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: FeeLine
}

"""Connection between the Order type and the LineItem type"""
type OrderToLineItemConnection {
  """Edges for the OrderToLineItemConnection connection"""
  edges: [OrderToLineItemConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [LineItem]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type OrderToLineItemConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: LineItem
}

"""Connection between the Order type and the Refund type"""
type OrderToRefundConnection {
  """Edges for the OrderToRefundConnection connection"""
  edges: [OrderToRefundConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Refund]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type OrderToRefundConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Refund
}

"""Arguments for filtering the OrderToRefundConnection connection"""
input OrderToRefundConnectionWhereArgs {
  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """Ensure result set excludes specific IDs."""
  exclude: [Int]

  """Limit result set to specific ids."""
  include: [Int]

  """Limit result set to refunds from a specific group of order IDs."""
  orderIn: [Int]

  """What paramater to use to order the objects by."""
  orderby: [WCConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: Int

  """Specify objects whose parent is in an array"""
  parentIn: [Int]

  """Specify objects whose parent is not in an array"""
  parentNotIn: [Int]

  """Limit results to those matching a string."""
  search: String

  """Limit result set to refunds assigned a specific status."""
  statuses: [String]
}

"""Connection between the Order type and the ShippingLine type"""
type OrderToShippingLineConnection {
  """Edges for the OrderToShippingLineConnection connection"""
  edges: [OrderToShippingLineConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [ShippingLine]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type OrderToShippingLineConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ShippingLine
}

"""Connection between the Order type and the TaxLine type"""
type OrderToTaxLineConnection {
  """Edges for the OrderToTaxLineConnection connection"""
  edges: [OrderToTaxLineConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [TaxLine]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type OrderToTaxLineConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: TaxLine
}

"""The page type"""
type Page implements Node & ContentNode & UniformResourceIdentifiable & NodeWithTitle & NodeWithContentEditor & NodeWithAuthor & NodeWithFeaturedImage & NodeWithComments & NodeWithRevisions & NodeWithPageAttributes & HierarchicalContentNode {
  """
  Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): HierarchicalContentNodeToContentNodeConnection

  """Connection between the NodeWithAuthor type and the User type"""
  author: NodeWithAuthorToUserConnectionEdge

  """The database identifier of the author of the node"""
  authorDatabaseId: Int

  """The globally unique identifier of the author of the node"""
  authorId: ID

  """
  Connection between the HierarchicalContentNode type and the ContentNode type
  """
  children(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): HierarchicalContentNodeToContentNodeConnection

  """
  The number of comments. Even though WPGraphQL denotes this field as an
  integer, in WordPress this field should be saved as a numeric string for
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String

  """Connection between the page type and the Comment type"""
  comments(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: PageToCommentConnectionWhereArgs
  ): PageToCommentConnection

  """The content of the post."""
  content(
    """Format of the field output"""
    format: PostObjectFieldFormatEnum
  ): String

  """Connection between the page type and the ContentType type"""
  contentType: PageToContentTypeConnectionEdge

  """The ID of the object in the database."""
  databaseId: Int!

  """Post publishing date."""
  date: String

  """The publishing date set in GMT."""
  dateGmt: String

  """The desired slug of the post"""
  desiredSlug: String

  """
  If a user has edited the node within the past 15 seconds, this will return the
  user that last edited. Null if the edit lock doesn&#039;t exist or is greater
  than 15 seconds
  """
  editingLockedBy: ContentNodeToEditLockConnectionEdge

  """The RSS enclosure for the object"""
  enclosure: String

  """Connection between the ContentNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): ContentNodeToEnqueuedScriptConnection

  """
  Connection between the ContentNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): ContentNodeToEnqueuedStylesheetConnection

  """
  Connection between the NodeWithFeaturedImage type and the MediaItem type
  """
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge

  """
  The database identifier for the featured image node assigned to the content node
  """
  featuredImageDatabaseId: Int

  """Globally unique ID of the featured image assigned to the node"""
  featuredImageId: ID

  """
  The global unique identifier for this post. This currently matches the value
  stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot;
  database table.
  """
  guid: String

  """The globally unique identifier of the page object."""
  id: ID!

  """Whether this page is set to the static front page."""
  isFrontPage: Boolean!

  """Whether the object is a node in the preview state"""
  isPreview: Boolean

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """True if the node is a revision of another node"""
  isRevision: Boolean

  """The user that most recently edited the node"""
  lastEditedBy: ContentNodeToEditLastConnectionEdge

  """The permalink of the post"""
  link: String

  """
  A field used for ordering posts. This is typically used with nav menu items or
  for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """
  The local modified time for a post. If a post was recently updated the
  modified field will change to match the corresponding time.
  """
  modified: String

  """
  The GMT modified time for a post. If a post was recently updated the modified
  field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String

  """The id field matches the WP_Post-&gt;ID field."""
  pageId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")

  """The parent of the node. The parent object can be of various types"""
  parent: HierarchicalContentNodeToContentNodeConnectionEdge

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID

  """Connection between the page type and the page type"""
  preview: PageToPreviewConnectionEdge

  """The database id of the preview node"""
  previewRevisionDatabaseId: Int

  """Whether the object is a node in the preview state"""
  previewRevisionId: ID

  """
  If the current node is a revision, this field exposes the node this is a
  revision of. Returns null if the node is not a revision of another node.
  """
  revisionOf: NodeWithRevisionsToContentNodeConnectionEdge

  """Connection between the page type and the page type"""
  revisions(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: PageToRevisionConnectionWhereArgs
  ): PageToRevisionConnection

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name
  field and the post_name column in the database for the
  &quot;post_objects&quot; table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """The template assigned to the node"""
  template: ContentTemplateUnion

  """Connection between the ContentNode type and the TermNode type"""
  terms(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: ContentNodeToTermNodeConnectionWhereArgs
  ): ContentNodeToTermNodeConnection

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """Format of the field output"""
    format: PostObjectFieldFormatEnum
  ): String

  """URI path for the resource"""
  uri: String!
}

"""
The Type of Identifier used to fetch a single resource. Default is ID.
"""
enum PageIdType {
  """Identify a resource by the Database ID."""
  DATABASE_ID

  """Identify a resource by the (hashed) Global ID."""
  ID

  """Identify a resource by the URI."""
  URI
}

"""Connection between the page type and the Comment type"""
type PageToCommentConnection {
  """Edges for the PageToCommentConnection connection"""
  edges: [PageToCommentConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Comment]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type PageToCommentConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Comment
}

"""Arguments for filtering the PageToCommentConnection connection"""
input PageToCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """Limit results to those affiliated with a given content object ID."""
  contentId: ID

  """Array of content object IDs to include affiliated comments for."""
  contentIdIn: [ID]

  """Array of content object IDs to exclude affiliated comments for."""
  contentIdNotIn: [ID]

  """Content object name to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [ContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be
  returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: OrderEnum

  """Field to order the comments by."""
  orderby: CommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """Array of parent IDs of comments *not* to retrieve children for."""
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Connection between the page type and the ContentType type"""
type PageToContentTypeConnectionEdge {
  """The nodes of the connection, without the edges"""
  node: ContentType
}

"""Connection between the page type and the page type"""
type PageToPreviewConnectionEdge {
  """The nodes of the connection, without the edges"""
  node: Page
}

"""Connection between the page type and the page type"""
type PageToRevisionConnection {
  """Edges for the pageToRevisionConnection connection"""
  edges: [PageToRevisionConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Page]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type PageToRevisionConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Page
}

"""Arguments for filtering the pageToRevisionConnection connection"""
input PageToRevisionConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """Title of the object"""
  title: String
}

"""An plugin object"""
type Plugin implements Node {
  """Name of the plugin author(s), may also be a company name."""
  author: String

  """URI for the related author(s)/company website."""
  authorUri: String

  """Description of the plugin."""
  description: String

  """The globally unique identifier of the plugin object."""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Display name of the plugin."""
  name: String

  """Plugin path."""
  path: String

  """
  URI for the plugin website. This is useful for directing users for support requests etc.
  """
  pluginUri: String

  """Current version of the plugin."""
  version: String
}

"""The post type"""
type Post implements Node & ContentNode & UniformResourceIdentifiable & NodeWithTitle & NodeWithContentEditor & NodeWithAuthor & NodeWithFeaturedImage & NodeWithExcerpt & NodeWithComments & NodeWithTrackbacks & NodeWithRevisions {
  """Connection between the NodeWithAuthor type and the User type"""
  author: NodeWithAuthorToUserConnectionEdge

  """The database identifier of the author of the node"""
  authorDatabaseId: Int

  """The globally unique identifier of the author of the node"""
  authorId: ID

  """Connection between the post type and the category type"""
  categories(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: PostToCategoryConnectionWhereArgs
  ): PostToCategoryConnection

  """
  The number of comments. Even though WPGraphQL denotes this field as an
  integer, in WordPress this field should be saved as a numeric string for
  """
  commentCount: Int

  """Whether the comments are open or closed for this particular post."""
  commentStatus: String

  """Connection between the post type and the Comment type"""
  comments(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: PostToCommentConnectionWhereArgs
  ): PostToCommentConnection

  """The content of the post."""
  content(
    """Format of the field output"""
    format: PostObjectFieldFormatEnum
  ): String

  """Connection between the post type and the ContentType type"""
  contentType: PostToContentTypeConnectionEdge

  """The ID of the object in the database."""
  databaseId: Int!

  """Post publishing date."""
  date: String

  """The publishing date set in GMT."""
  dateGmt: String

  """The desired slug of the post"""
  desiredSlug: String

  """
  If a user has edited the node within the past 15 seconds, this will return the
  user that last edited. Null if the edit lock doesn&#039;t exist or is greater
  than 15 seconds
  """
  editingLockedBy: ContentNodeToEditLockConnectionEdge

  """The RSS enclosure for the object"""
  enclosure: String

  """Connection between the ContentNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): ContentNodeToEnqueuedScriptConnection

  """
  Connection between the ContentNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): ContentNodeToEnqueuedStylesheetConnection

  """The excerpt of the post."""
  excerpt(
    """Format of the field output"""
    format: PostObjectFieldFormatEnum
  ): String

  """
  Connection between the NodeWithFeaturedImage type and the MediaItem type
  """
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge

  """
  The database identifier for the featured image node assigned to the content node
  """
  featuredImageDatabaseId: Int

  """Globally unique ID of the featured image assigned to the node"""
  featuredImageId: ID

  """
  The global unique identifier for this post. This currently matches the value
  stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot;
  database table.
  """
  guid: String

  """The globally unique identifier of the post object."""
  id: ID!

  """Whether the object is a node in the preview state"""
  isPreview: Boolean

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """True if the node is a revision of another node"""
  isRevision: Boolean

  """The user that most recently edited the node"""
  lastEditedBy: ContentNodeToEditLastConnectionEdge

  """The permalink of the post"""
  link: String

  """
  The local modified time for a post. If a post was recently updated the
  modified field will change to match the corresponding time.
  """
  modified: String

  """
  The GMT modified time for a post. If a post was recently updated the modified
  field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String

  """Whether the pings are open or closed for this particular post."""
  pingStatus: String

  """URLs that have been pinged."""
  pinged: [String]

  """Connection between the post type and the postFormat type"""
  postFormats(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: PostToPostFormatConnectionWhereArgs
  ): PostToPostFormatConnection

  """The id field matches the WP_Post-&gt;ID field."""
  postId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")

  """Connection between the post type and the post type"""
  preview: PostToPreviewConnectionEdge

  """The database id of the preview node"""
  previewRevisionDatabaseId: Int

  """Whether the object is a node in the preview state"""
  previewRevisionId: ID

  """
  If the current node is a revision, this field exposes the node this is a
  revision of. Returns null if the node is not a revision of another node.
  """
  revisionOf: NodeWithRevisionsToContentNodeConnectionEdge

  """Connection between the post type and the post type"""
  revisions(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: PostToRevisionConnectionWhereArgs
  ): PostToRevisionConnection

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name
  field and the post_name column in the database for the
  &quot;post_objects&quot; table.
  """
  slug: String

  """The current status of the object"""
  status: String

  """Connection between the post type and the tag type"""
  tags(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: PostToTagConnectionWhereArgs
  ): PostToTagConnection

  """The template assigned to the node"""
  template: ContentTemplateUnion

  """Connection between the ContentNode type and the TermNode type"""
  terms(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: ContentNodeToTermNodeConnectionWhereArgs
  ): ContentNodeToTermNodeConnection

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """Format of the field output"""
    format: PostObjectFieldFormatEnum
  ): String

  """URLs queued to be pinged."""
  toPing: [String]

  """URI path for the resource"""
  uri: String!
}

"""Set relationships between the post to categories"""
input PostCategoriesInput {
  """
  If true, this will append the category to existing related categories. If
  false, this will replace existing relationships. Default true.
  """
  append: Boolean
  nodes: [PostCategoriesNodeInput]
}

"""
List of categories to connect the post to. If an ID is set, it will be used to
create the connection. If not, it will look for a slug. If neither are valid
existing terms, and the site is configured to allow terms to be created during
post mutations, a term will be created using the Name if it exists in the input,
then fallback to the slug if it exists.
"""
input PostCategoriesNodeInput {
  """
  The description of the category. This field is used to set a description of
  the category if a new one is created during the mutation.
  """
  description: String

  """
  The ID of the category. If present, this will be used to connect to the post.
  If no existing category exists with this ID, no connection will be made.
  """
  id: ID

  """
  The name of the category. This field is used to create a new term, if term
  creation is enabled in nested mutations, and if one does not already exist
  with the provided slug or ID or if a slug or ID is not provided. If no name is
  included and a term is created, the creation will fallback to the slug field.
  """
  name: String

  """
  The slug of the category. If no ID is present, this field will be used to make
  a connection. If no existing term exists with this slug, this field will be
  used as a fallback to the Name field when creating a new term to connect to,
  if term creation is enabled as a nested mutation.
  """
  slug: String
}

"""The postFormat type"""
type PostFormat implements Node & TermNode & UniformResourceIdentifiable {
  """The number of objects connected to the object"""
  count: Int

  """Identifies the primary key from the database."""
  databaseId: Int!

  """The description of the object"""
  description: String

  """Connection between the TermNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): TermNodeToEnqueuedScriptConnection

  """Connection between the TermNode type and the EnqueuedStylesheet type"""
  enqueuedStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): TermNodeToEnqueuedStylesheetConnection

  """The globally unique ID for the object"""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """The id field matches the WP_Post-&gt;ID field."""
  postFormatId: Int @deprecated(reason: "Deprecated in favor of databaseId")

  """Connection between the postFormat type and the post type"""
  posts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: PostFormatToPostConnectionWhereArgs
  ): PostFormatToPostConnection

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """Connection between the postFormat type and the Taxonomy type"""
  taxonomy: PostFormatToTaxonomyConnectionEdge

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String!
}

"""
The Type of Identifier used to fetch a single resource. Default is ID.
"""
enum PostFormatIdType {
  """The Database ID for the node"""
  DATABASE_ID

  """The hashed Global ID"""
  ID

  """The name of the node"""
  NAME

  """Url friendly name of the node"""
  SLUG

  """The URI for the node"""
  URI
}

"""Connection between the postFormat type and the post type"""
type PostFormatToPostConnection {
  """Edges for the PostFormatToPostConnection connection"""
  edges: [PostFormatToPostConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Post]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type PostFormatToPostConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Post
}

"""Arguments for filtering the PostFormatToPostConnection connection"""
input PostFormatToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Category ID"""
  categoryId: Int

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]

  """Use Category Slug"""
  categoryName: String

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """Tag Slug"""
  tag: String

  """Use Tag ID"""
  tagId: String

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagIn: [ID]

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagNotIn: [ID]

  """Array of tag slugs, used to display objects from one tag OR another"""
  tagSlugAnd: [String]

  """Array of tag slugs, used to exclude objects in specified tags"""
  tagSlugIn: [String]

  """Title of the object"""
  title: String
}

"""Connection between the postFormat type and the Taxonomy type"""
type PostFormatToTaxonomyConnectionEdge {
  """The nodes of the connection, without the edges"""
  node: Taxonomy
}

"""
The Type of Identifier used to fetch a single resource. Default is ID.
"""
enum PostIdType {
  """Identify a resource by the Database ID."""
  DATABASE_ID

  """Identify a resource by the (hashed) Global ID."""
  ID

  """Identify a resource by the URI."""
  URI

  """
  Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier.
  """
  SLUG
}

"""The format of post field data."""
enum PostObjectFieldFormatEnum {
  """Provide the field value directly from database"""
  RAW

  """Apply the default WordPress rendering"""
  RENDERED
}

"""The column to use when filtering by date"""
enum PostObjectsConnectionDateColumnEnum {
  DATE
  MODIFIED
}

"""Field to order the connection by"""
enum PostObjectsConnectionOrderbyEnum {
  """Order by author"""
  AUTHOR

  """Order by the number of comments it has acquired"""
  COMMENT_COUNT

  """Order by publish date"""
  DATE

  """Preserve the ID order given in the IN array"""
  IN

  """Order by the menu order value"""
  MENU_ORDER

  """Order by last modified date"""
  MODIFIED

  """Preserve slug order given in the NAME_IN array"""
  NAME_IN

  """Order by parent ID"""
  PARENT

  """Order by slug"""
  SLUG

  """Order by title"""
  TITLE
}

"""Options for ordering the connection"""
input PostObjectsConnectionOrderbyInput {
  """The field to order the connection by"""
  field: PostObjectsConnectionOrderbyEnum!

  """Possible directions in which to order a list of items"""
  order: OrderEnum!
}

"""Set relationships between the post to postFormats"""
input PostPostFormatsInput {
  """
  If true, this will append the postFormat to existing related postFormats. If
  false, this will replace existing relationships. Default true.
  """
  append: Boolean
  nodes: [PostPostFormatsNodeInput]
}

"""
List of postFormats to connect the post to. If an ID is set, it will be used to
create the connection. If not, it will look for a slug. If neither are valid
existing terms, and the site is configured to allow terms to be created during
post mutations, a term will be created using the Name if it exists in the input,
then fallback to the slug if it exists.
"""
input PostPostFormatsNodeInput {
  """
  The description of the postFormat. This field is used to set a description of
  the postFormat if a new one is created during the mutation.
  """
  description: String

  """
  The ID of the postFormat. If present, this will be used to connect to the
  post. If no existing postFormat exists with this ID, no connection will be
  """
  id: ID

  """
  The name of the postFormat. This field is used to create a new term, if term
  creation is enabled in nested mutations, and if one does not already exist
  with the provided slug or ID or if a slug or ID is not provided. If no name is
  included and a term is created, the creation will fallback to the slug field.
  """
  name: String

  """
  The slug of the postFormat. If no ID is present, this field will be used to
  make a connection. If no existing term exists with this slug, this field will
  be used as a fallback to the Name field when creating a new term to connect
  to, if term creation is enabled as a nested mutation.
  """
  slug: String
}

"""The status of the object."""
enum PostStatusEnum {
  """Objects with the auto-draft status"""
  AUTO_DRAFT

  """Objects with the draft status"""
  DRAFT

  """Objects with the failed status"""
  FAILED

  """Objects with the future status"""
  FUTURE

  """Objects with the inherit status"""
  INHERIT

  """Objects with the in-progress status"""
  IN_PROGRESS

  """Objects with the pending status"""
  PENDING

  """Objects with the private status"""
  PRIVATE

  """Objects with the publish status"""
  PUBLISH

  """Objects with the request-completed status"""
  REQUEST_COMPLETED

  """Objects with the request-confirmed status"""
  REQUEST_CONFIRMED

  """Objects with the request-failed status"""
  REQUEST_FAILED

  """Objects with the request-pending status"""
  REQUEST_PENDING

  """Objects with the trash status"""
  TRASH

  """Objects with the wc-cancelled status"""
  WC_CANCELLED

  """Objects with the wc-completed status"""
  WC_COMPLETED

  """Objects with the wc-failed status"""
  WC_FAILED

  """Objects with the wc-on-hold status"""
  WC_ON_HOLD

  """Objects with the wc-pending status"""
  WC_PENDING

  """Objects with the wc-processing status"""
  WC_PROCESSING

  """Objects with the wc-refunded status"""
  WC_REFUNDED
}

"""Set relationships between the post to tags"""
input PostTagsInput {
  """
  If true, this will append the tag to existing related tags. If false, this
  will replace existing relationships. Default true.
  """
  append: Boolean
  nodes: [PostTagsNodeInput]
}

"""
List of tags to connect the post to. If an ID is set, it will be used to create
the connection. If not, it will look for a slug. If neither are valid existing
terms, and the site is configured to allow terms to be created during post
mutations, a term will be created using the Name if it exists in the input, then
fallback to the slug if it exists.
"""
input PostTagsNodeInput {
  """
  The description of the tag. This field is used to set a description of the tag
  if a new one is created during the mutation.
  """
  description: String

  """
  The ID of the tag. If present, this will be used to connect to the post. If no
  existing tag exists with this ID, no connection will be made.
  """
  id: ID

  """
  The name of the tag. This field is used to create a new term, if term creation
  is enabled in nested mutations, and if one does not already exist with the
  provided slug or ID or if a slug or ID is not provided. If no name is included
  and a term is created, the creation will fallback to the slug field.
  """
  name: String

  """
  The slug of the tag. If no ID is present, this field will be used to make a
  connection. If no existing term exists with this slug, this field will be used
  as a fallback to the Name field when creating a new term to connect to, if
  term creation is enabled as a nested mutation.
  """
  slug: String
}

"""Connection between the post type and the category type"""
type PostToCategoryConnection {
  """Edges for the PostToCategoryConnection connection"""
  edges: [PostToCategoryConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Category]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type PostToCategoryConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Category
}

"""Arguments for filtering the PostToCategoryConnection connection"""
input PostToCategoryConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the post type and the Comment type"""
type PostToCommentConnection {
  """Edges for the PostToCommentConnection connection"""
  edges: [PostToCommentConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Comment]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type PostToCommentConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Comment
}

"""Arguments for filtering the PostToCommentConnection connection"""
input PostToCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """Limit results to those affiliated with a given content object ID."""
  contentId: ID

  """Array of content object IDs to include affiliated comments for."""
  contentIdIn: [ID]

  """Array of content object IDs to exclude affiliated comments for."""
  contentIdNotIn: [ID]

  """Content object name to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [ContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be
  returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: OrderEnum

  """Field to order the comments by."""
  orderby: CommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """Array of parent IDs of comments *not* to retrieve children for."""
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Connection between the post type and the ContentType type"""
type PostToContentTypeConnectionEdge {
  """The nodes of the connection, without the edges"""
  node: ContentType
}

"""Connection between the post type and the postFormat type"""
type PostToPostFormatConnection {
  """Edges for the PostToPostFormatConnection connection"""
  edges: [PostToPostFormatConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [PostFormat]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type PostToPostFormatConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: PostFormat
}

"""Arguments for filtering the PostToPostFormatConnection connection"""
input PostToPostFormatConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the post type and the post type"""
type PostToPreviewConnectionEdge {
  """The nodes of the connection, without the edges"""
  node: Post
}

"""Connection between the post type and the post type"""
type PostToRevisionConnection {
  """Edges for the postToRevisionConnection connection"""
  edges: [PostToRevisionConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Post]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type PostToRevisionConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Post
}

"""Arguments for filtering the postToRevisionConnection connection"""
input PostToRevisionConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Category ID"""
  categoryId: Int

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]

  """Use Category Slug"""
  categoryName: String

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """Tag Slug"""
  tag: String

  """Use Tag ID"""
  tagId: String

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagIn: [ID]

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagNotIn: [ID]

  """Array of tag slugs, used to display objects from one tag OR another"""
  tagSlugAnd: [String]

  """Array of tag slugs, used to exclude objects in specified tags"""
  tagSlugIn: [String]

  """Title of the object"""
  title: String
}

"""Connection between the post type and the tag type"""
type PostToTagConnection {
  """Edges for the PostToTagConnection connection"""
  edges: [PostToTagConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Tag]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type PostToTagConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Tag
}

"""Arguments for filtering the PostToTagConnection connection"""
input PostToTagConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Details for labels of the PostType"""
type PostTypeLabelDetails {
  """
  Default is ‘Add New’ for both hierarchical and non-hierarchical types.
  """
  addNew: String

  """Label for adding a new singular item."""
  addNewItem: String

  """Label to signify all items in a submenu link."""
  allItems: String

  """Label for archives in nav menus"""
  archives: String

  """Label for the attributes meta box."""
  attributes: String

  """Label for editing a singular item."""
  editItem: String

  """Label for the Featured Image meta box title."""
  featuredImage: String

  """Label for the table views hidden heading."""
  filterItemsList: String

  """Label for the media frame button."""
  insertIntoItem: String

  """Label for the table hidden heading."""
  itemsList: String

  """Label for the table pagination hidden heading."""
  itemsListNavigation: String

  """Label for the menu name."""
  menuName: String

  """General name for the post type, usually plural."""
  name: String

  """Label for the new item page title."""
  newItem: String

  """Label used when no items are found."""
  notFound: String

  """Label used when no items are in the trash."""
  notFoundInTrash: String

  """Label used to prefix parents of hierarchical items."""
  parentItemColon: String

  """Label for removing the featured image."""
  removeFeaturedImage: String

  """Label for searching plural items."""
  searchItems: String

  """Label for setting the featured image."""
  setFeaturedImage: String

  """Name for one object of this post type."""
  singularName: String

  """Label for the media frame filter."""
  uploadedToThisItem: String

  """Label in the media frame for using a featured image."""
  useFeaturedImage: String

  """Label for viewing a singular item."""
  viewItem: String

  """Label for viewing post type archives."""
  viewItems: String
}

"""A product object"""
type Product {
  """Connection between the Product type and the ProductAttribute type"""
  attributes(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): ProductToProductAttributeConnection

  """Product average count"""
  averageRating: Float

  """Product backorders status"""
  backorders: BackordersEnum

  """Can product be backordered?"""
  backordersAllowed: Boolean

  """External product Buy button text"""
  buttonText: String

  """Catalog visibility"""
  catalogVisibility: CatalogVisibilityEnum

  """Connection between the Product type and the ProductCategory type"""
  categories(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: ProductToProductCategoryConnectionWhereArgs
  ): ProductToProductCategoryConnection

  """Connection between the Product type and the Product type"""
  crossSell(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: ProductToProductConnectionWhereArgs
  ): ProductToProductConnection

  """Date product created"""
  date: String

  """Date on sale from"""
  dateOnSaleFrom: String

  """Date on sale to"""
  dateOnSaleTo: String

  """Connection between the Product type and the VariationAttribute type"""
  defaultAttributes(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): ProductToVariationAttributeConnection

  """Product description"""
  description: String

  """Download expiry"""
  downloadExpiry: Int

  """Download limit"""
  downloadLimit: Int

  """Is downloadable?"""
  downloadable: Boolean

  """Product downloads"""
  downloads: [ProductDownload]

  """External product url"""
  externalUrl: String

  """If the product is featured"""
  featured: Boolean

  """Connection between the Product type and the MediaItem type"""
  galleryImages(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: ProductToMediaItemConnectionWhereArgs
  ): ProductToMediaItemConnection

  """Connection between the Product type and the Product type"""
  grouped(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: ProductToProductConnectionWhereArgs
  ): ProductToProductConnection

  """Product&#039;s height"""
  height: String

  """The globally unique identifier for the product"""
  id: ID!

  """Main image"""
  image: MediaItem

  """Product&#039;s length"""
  length: String

  """If product manage stock"""
  manageStock: Boolean

  """Menu order"""
  menuOrder: Int

  """Date product last updated"""
  modified: String

  """Product name"""
  name: String

  """Is product on sale?"""
  onSale: Boolean

  """Parent product"""
  parent: Product

  """Product&#039;s active price"""
  price(
    """Show maximum price (Variable type product)"""
    max: Boolean
  ): String

  """The Id of the order. Equivalent to WP_Post-&gt;ID"""
  productId: Int

  """Can product be purchased?"""
  purchasable: Boolean

  """Purchase note"""
  purchaseNote: String

  """Product rating counts"""
  ratingCount: RatingCounter

  """Product&#039;s regular price"""
  regularPrice(
    """Show maximum price (Variable type product)"""
    max: Boolean
  ): String

  """Connection between the Product type and the Product type"""
  related(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: ProductToProductConnectionWhereArgs
  ): ProductToProductConnection

  """Product review count"""
  reviewCount: Int

  """If reviews are allowed"""
  reviewsAllowed: Boolean

  """Product&#039;s sale price"""
  salePrice(
    """Show maximum price (Variable type product)"""
    max: Boolean
  ): String

  """shipping class ID"""
  shippingClassId: Int

  """Does product need to be shipped?"""
  shippingRequired: Boolean

  """Is product shipping taxable?"""
  shippingTaxable: Boolean

  """Product short description"""
  shortDescription: String

  """Product SKU"""
  sku: String

  """Product slug"""
  slug: String

  """If should be sold individually"""
  soldIndividually: Boolean

  """Product status"""
  status: String

  """Number of items available for sale"""
  stockQuantity: Int

  """Product stock status"""
  stockStatus: StockStatusEnum

  """Connection between the Product type and the ProductTag type"""
  tags(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: ProductToProductTagConnectionWhereArgs
  ): ProductToProductTagConnection

  """Tax class"""
  taxClass: TaxClassEnum

  """Tax status"""
  taxStatus: TaxStatusEnum

  """Number total of sales"""
  totalSales: Int

  """Product type"""
  type: ProductTypesEnum

  """Connection between the Product type and the Product type"""
  upsell(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: ProductToProductConnectionWhereArgs
  ): ProductToProductConnection

  """Connection between the Product type and the ProductVariation type"""
  variations(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: ProductToProductVariationConnectionWhereArgs
  ): ProductToProductVariationConnection

  """Is product virtual?"""
  virtual: Boolean

  """Product&#039;s weight"""
  weight: String

  """Product&#039;s width"""
  width: String
}

"""A product attribute object"""
type ProductAttribute {
  """Attribute ID"""
  attributeId: Int!

  """Attribute name"""
  name: String!

  """Attribute options"""
  options: [String]

  """Attribute position"""
  position: Int!

  """Is attribute on product variation"""
  variation: Boolean!

  """Is attribute visible"""
  visible: Boolean!
}

"""Options for ordering the connection"""
input ProductAttributeInput {
  attribute: String!
  attributeTerm: String!
}

"""The productCategory type"""
type ProductCategory implements Node & TermNode & UniformResourceIdentifiable & HierarchicalTermNode {
  """The ancestors of the object"""
  ancestors: [ProductCategory]

  """
  Connection between the productCategory type and the productCategory type
  """
  children(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: ProductCategoryToProductCategoryConnectionWhereArgs
  ): ProductCategoryToProductCategoryConnection

  """The number of objects connected to the object"""
  count: Int

  """Identifies the primary key from the database."""
  databaseId: Int!

  """The description of the object"""
  description: String

  """Connection between the TermNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): TermNodeToEnqueuedScriptConnection

  """Connection between the TermNode type and the EnqueuedStylesheet type"""
  enqueuedStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): TermNodeToEnqueuedStylesheetConnection

  """The globally unique ID for the object"""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """The parent object"""
  parent: ProductCategory

  """Database id of the parent node"""
  parentDatabaseId: Int

  """The globally unique identifier of the parent node."""
  parentId: ID

  """
  Connection between the productCategory type and the productCategory type
  """
  parentNode: ProductCategoryToParentProductCategoryConnectionEdge

  """The id field matches the WP_Post-&gt;ID field."""
  productCategoryId: Int @deprecated(reason: "Deprecated in favor of databaseId")

  """Connection between the ProductCategory type and the Product type"""
  products(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: ProductCategoryToProductConnectionWhereArgs
  ): ProductCategoryToProductConnection

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """Connection between the productCategory type and the Taxonomy type"""
  taxonomy: ProductCategoryToTaxonomyConnectionEdge

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String!
}

"""
The Type of Identifier used to fetch a single resource. Default is ID.
"""
enum ProductCategoryIdType {
  """The Database ID for the node"""
  DATABASE_ID

  """The hashed Global ID"""
  ID

  """The name of the node"""
  NAME

  """Url friendly name of the node"""
  SLUG

  """The URI for the node"""
  URI
}

"""
Connection between the productCategory type and the productCategory type
"""
type ProductCategoryToParentProductCategoryConnectionEdge {
  """The nodes of the connection, without the edges"""
  node: ProductCategory
}

"""
Connection between the productCategory type and the productCategory type
"""
type ProductCategoryToProductCategoryConnection {
  """Edges for the ProductCategoryToProductCategoryConnection connection"""
  edges: [ProductCategoryToProductCategoryConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [ProductCategory]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type ProductCategoryToProductCategoryConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ProductCategory
}

"""
Arguments for filtering the ProductCategoryToProductCategoryConnection connection
"""
input ProductCategoryToProductCategoryConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the ProductCategory type and the Product type"""
type ProductCategoryToProductConnection {
  """Edges for the ProductCategoryToProductConnection connection"""
  edges: [ProductCategoryToProductConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Product]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type ProductCategoryToProductConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Product
}

"""
Arguments for filtering the ProductCategoryToProductConnection connection
"""
input ProductCategoryToProductConnectionWhereArgs {
  """
  Limit result set to products with a specific attribute. Use the taxonomy name/attribute slug.
  """
  attribute: String

  """
  Limit result set to products with a specific attribute term ID (required an assigned attribute).
  """
  attributeTerm: String

  """Limit result set to products assigned a specific category name."""
  category: Int

  """
  Limit result set to products assigned to a specific group of category IDs.
  """
  categoryIn: [Int]

  """Limit result set to products assigned a specific category name."""
  categoryName: String

  """
  Limit result set to products assigned to a group of specific categories by name.
  """
  categoryNameIn: [String]

  """
  Limit result set to products not assigned to a group of specific categories by name.
  """
  categoryNameNotIn: [String]

  """
  Limit result set to products not assigned to a specific group of category IDs.
  """
  categoryNotIn: [Int]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """Ensure result set excludes specific IDs."""
  exclude: [Int]

  """Limit result set to featured products."""
  featured: Boolean

  """Limit result set to specific ids."""
  include: [Int]

  """Limit result set to products based on a maximum price."""
  maxPrice: Float

  """Limit result set to products based on a minimum price."""
  minPrice: Float

  """Limit result set to products on sale."""
  onSale: Boolean

  """What paramater to use to order the objects by."""
  orderby: [WCConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: Int

  """Specify objects whose parent is in an array"""
  parentIn: [Int]

  """Specify objects whose parent is not in an array"""
  parentNotIn: [Int]

  """Limit result set to products based on a keyword search."""
  search: String

  """Limit result set to products assigned a specific shipping class ID."""
  shippingClassId: Int

  """
  Limit result set to products with specific SKU(s). Use commas to separate.
  """
  sku: String

  """Limit result set to products with a specific slug."""
  slug: String

  """Limit result set to products assigned a specific status."""
  status: String

  """Limit result set to products in stock or out of stock."""
  stockStatus: [StockStatusEnum]

  """Limit result set to products assigned a specific tag name."""
  tag: String

  """Limit result set to products assigned a specific tag ID."""
  tagId: Int

  """Limit result set to products assigned to a specific group of tag IDs."""
  tagIn: [Int]

  """
  Limit result set to products not assigned to a specific group of tag IDs.
  """
  tagNotIn: [Int]

  """Limit result set to products assigned to a specific group of tag IDs."""
  tagSlugIn: [String]

  """
  Limit result set to products not assigned to a specific group of tag IDs.
  """
  tagSlugNotIn: [String]

  """Limit result set to products assigned a specific type."""
  type: ProductTypesEnum

  """Limit result set to products assigned to a group of specific types."""
  typeIn: [ProductTypesEnum]

  """
  Limit result set to products not assigned to a group of specific types.
  """
  typeNotIn: [ProductTypesEnum]

  """Limit result set to products with a specific visibility level."""
  visibility: CatalogVisibilityEnum
}

"""Connection between the productCategory type and the Taxonomy type"""
type ProductCategoryToTaxonomyConnectionEdge {
  """The nodes of the connection, without the edges"""
  node: Taxonomy
}

"""A product object"""
type ProductDownload {
  """Is file allowed"""
  allowedFileType: Boolean

  """Product download ID"""
  downloadId: Int!

  """Download file"""
  file: String

  """Validate file exists"""
  fileExists: Boolean

  """File extension"""
  fileExt: String

  """Type of file path set"""
  filePathType: String

  """File type"""
  fileType: String

  """Product download name"""
  name: String
}

"""The productTag type"""
type ProductTag implements Node & TermNode & UniformResourceIdentifiable {
  """The number of objects connected to the object"""
  count: Int

  """Identifies the primary key from the database."""
  databaseId: Int!

  """The description of the object"""
  description: String

  """Connection between the TermNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): TermNodeToEnqueuedScriptConnection

  """Connection between the TermNode type and the EnqueuedStylesheet type"""
  enqueuedStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): TermNodeToEnqueuedStylesheetConnection

  """The globally unique ID for the object"""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """The id field matches the WP_Post-&gt;ID field."""
  productTagId: Int @deprecated(reason: "Deprecated in favor of databaseId")

  """Connection between the ProductTag type and the Product type"""
  products(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: ProductTagToProductConnectionWhereArgs
  ): ProductTagToProductConnection

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """Connection between the productTag type and the Taxonomy type"""
  taxonomy: ProductTagToTaxonomyConnectionEdge

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String!
}

"""
The Type of Identifier used to fetch a single resource. Default is ID.
"""
enum ProductTagIdType {
  """The Database ID for the node"""
  DATABASE_ID

  """The hashed Global ID"""
  ID

  """The name of the node"""
  NAME

  """Url friendly name of the node"""
  SLUG

  """The URI for the node"""
  URI
}

"""Connection between the ProductTag type and the Product type"""
type ProductTagToProductConnection {
  """Edges for the ProductTagToProductConnection connection"""
  edges: [ProductTagToProductConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Product]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type ProductTagToProductConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Product
}

"""Arguments for filtering the ProductTagToProductConnection connection"""
input ProductTagToProductConnectionWhereArgs {
  """
  Limit result set to products with a specific attribute. Use the taxonomy name/attribute slug.
  """
  attribute: String

  """
  Limit result set to products with a specific attribute term ID (required an assigned attribute).
  """
  attributeTerm: String

  """Limit result set to products assigned a specific category name."""
  category: Int

  """
  Limit result set to products assigned to a specific group of category IDs.
  """
  categoryIn: [Int]

  """Limit result set to products assigned a specific category name."""
  categoryName: String

  """
  Limit result set to products assigned to a group of specific categories by name.
  """
  categoryNameIn: [String]

  """
  Limit result set to products not assigned to a group of specific categories by name.
  """
  categoryNameNotIn: [String]

  """
  Limit result set to products not assigned to a specific group of category IDs.
  """
  categoryNotIn: [Int]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """Ensure result set excludes specific IDs."""
  exclude: [Int]

  """Limit result set to featured products."""
  featured: Boolean

  """Limit result set to specific ids."""
  include: [Int]

  """Limit result set to products based on a maximum price."""
  maxPrice: Float

  """Limit result set to products based on a minimum price."""
  minPrice: Float

  """Limit result set to products on sale."""
  onSale: Boolean

  """What paramater to use to order the objects by."""
  orderby: [WCConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: Int

  """Specify objects whose parent is in an array"""
  parentIn: [Int]

  """Specify objects whose parent is not in an array"""
  parentNotIn: [Int]

  """Limit result set to products based on a keyword search."""
  search: String

  """Limit result set to products assigned a specific shipping class ID."""
  shippingClassId: Int

  """
  Limit result set to products with specific SKU(s). Use commas to separate.
  """
  sku: String

  """Limit result set to products with a specific slug."""
  slug: String

  """Limit result set to products assigned a specific status."""
  status: String

  """Limit result set to products in stock or out of stock."""
  stockStatus: [StockStatusEnum]

  """Limit result set to products assigned a specific tag name."""
  tag: String

  """Limit result set to products assigned a specific tag ID."""
  tagId: Int

  """Limit result set to products assigned to a specific group of tag IDs."""
  tagIn: [Int]

  """
  Limit result set to products not assigned to a specific group of tag IDs.
  """
  tagNotIn: [Int]

  """Limit result set to products assigned to a specific group of tag IDs."""
  tagSlugIn: [String]

  """
  Limit result set to products not assigned to a specific group of tag IDs.
  """
  tagSlugNotIn: [String]

  """Limit result set to products assigned a specific type."""
  type: ProductTypesEnum

  """Limit result set to products assigned to a group of specific types."""
  typeIn: [ProductTypesEnum]

  """
  Limit result set to products not assigned to a group of specific types.
  """
  typeNotIn: [ProductTypesEnum]

  """Limit result set to products with a specific visibility level."""
  visibility: CatalogVisibilityEnum
}

"""Connection between the productTag type and the Taxonomy type"""
type ProductTagToTaxonomyConnectionEdge {
  """The nodes of the connection, without the edges"""
  node: Taxonomy
}

"""Connection between the Product type and the MediaItem type"""
type ProductToMediaItemConnection {
  """Edges for the ProductToMediaItemConnection connection"""
  edges: [ProductToMediaItemConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [MediaItem]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type ProductToMediaItemConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: MediaItem
}

"""Arguments for filtering the ProductToMediaItemConnection connection"""
input ProductToMediaItemConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the Product type and the ProductAttribute type"""
type ProductToProductAttributeConnection {
  """Edges for the ProductToProductAttributeConnection connection"""
  edges: [ProductToProductAttributeConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [ProductAttribute]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type ProductToProductAttributeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ProductAttribute
}

"""Connection between the Product type and the ProductCategory type"""
type ProductToProductCategoryConnection {
  """Edges for the ProductToProductCategoryConnection connection"""
  edges: [ProductToProductCategoryConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [ProductCategory]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type ProductToProductCategoryConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ProductCategory
}

"""
Arguments for filtering the ProductToProductCategoryConnection connection
"""
input ProductToProductCategoryConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the Product type and the Product type"""
type ProductToProductConnection {
  """Edges for the ProductToProductConnection connection"""
  edges: [ProductToProductConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Product]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type ProductToProductConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Product
}

"""Arguments for filtering the ProductToProductConnection connection"""
input ProductToProductConnectionWhereArgs {
  """
  Limit result set to products with a specific attribute. Use the taxonomy name/attribute slug.
  """
  attribute: String

  """
  Limit result set to products with a specific attribute term ID (required an assigned attribute).
  """
  attributeTerm: String

  """Limit result set to products assigned a specific category name."""
  category: Int

  """
  Limit result set to products assigned to a specific group of category IDs.
  """
  categoryIn: [Int]

  """Limit result set to products assigned a specific category name."""
  categoryName: String

  """
  Limit result set to products assigned to a group of specific categories by name.
  """
  categoryNameIn: [String]

  """
  Limit result set to products not assigned to a group of specific categories by name.
  """
  categoryNameNotIn: [String]

  """
  Limit result set to products not assigned to a specific group of category IDs.
  """
  categoryNotIn: [Int]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """Ensure result set excludes specific IDs."""
  exclude: [Int]

  """Limit result set to featured products."""
  featured: Boolean

  """Limit result set to specific ids."""
  include: [Int]

  """Limit result set to products based on a maximum price."""
  maxPrice: Float

  """Limit result set to products based on a minimum price."""
  minPrice: Float

  """Limit result set to products on sale."""
  onSale: Boolean

  """What paramater to use to order the objects by."""
  orderby: [WCConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: Int

  """Specify objects whose parent is in an array"""
  parentIn: [Int]

  """Specify objects whose parent is not in an array"""
  parentNotIn: [Int]

  """Limit result set to products based on a keyword search."""
  search: String

  """Limit result set to products assigned a specific shipping class ID."""
  shippingClassId: Int

  """
  Limit result set to products with specific SKU(s). Use commas to separate.
  """
  sku: String

  """Limit result set to products with a specific slug."""
  slug: String

  """Limit result set to products assigned a specific status."""
  status: String

  """Limit result set to products in stock or out of stock."""
  stockStatus: [StockStatusEnum]

  """Limit result set to products assigned a specific tag name."""
  tag: String

  """Limit result set to products assigned a specific tag ID."""
  tagId: Int

  """Limit result set to products assigned to a specific group of tag IDs."""
  tagIn: [Int]

  """
  Limit result set to products not assigned to a specific group of tag IDs.
  """
  tagNotIn: [Int]

  """Limit result set to products assigned to a specific group of tag IDs."""
  tagSlugIn: [String]

  """
  Limit result set to products not assigned to a specific group of tag IDs.
  """
  tagSlugNotIn: [String]

  """Limit result set to products assigned a specific type."""
  type: ProductTypesEnum

  """Limit result set to products assigned to a group of specific types."""
  typeIn: [ProductTypesEnum]

  """
  Limit result set to products not assigned to a group of specific types.
  """
  typeNotIn: [ProductTypesEnum]

  """Limit result set to products with a specific visibility level."""
  visibility: CatalogVisibilityEnum
}

"""Connection between the Product type and the ProductTag type"""
type ProductToProductTagConnection {
  """Edges for the ProductToProductTagConnection connection"""
  edges: [ProductToProductTagConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [ProductTag]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type ProductToProductTagConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ProductTag
}

"""Arguments for filtering the ProductToProductTagConnection connection"""
input ProductToProductTagConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the Product type and the ProductVariation type"""
type ProductToProductVariationConnection {
  """Edges for the ProductToProductVariationConnection connection"""
  edges: [ProductToProductVariationConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [ProductVariation]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type ProductToProductVariationConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ProductVariation
}

"""
Arguments for filtering the ProductToProductVariationConnection connection
"""
input ProductToProductVariationConnectionWhereArgs {
  """
  Limit result set to products with a specific attribute. Use the taxonomy name/attribute slug.
  """
  attribute: String

  """
  Limit result set to products with a specific attribute term ID (required an assigned attribute).
  """
  attributeTerm: String

  """Limit result set to products assigned a specific category name."""
  category: Int

  """
  Limit result set to products assigned to a specific group of category IDs.
  """
  categoryIn: [Int]

  """Limit result set to products assigned a specific category name."""
  categoryName: String

  """
  Limit result set to products assigned to a group of specific categories by name.
  """
  categoryNameIn: [String]

  """
  Limit result set to products not assigned to a group of specific categories by name.
  """
  categoryNameNotIn: [String]

  """
  Limit result set to products not assigned to a specific group of category IDs.
  """
  categoryNotIn: [Int]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """Ensure result set excludes specific IDs."""
  exclude: [Int]

  """Limit result set to featured products."""
  featured: Boolean

  """Limit result set to specific ids."""
  include: [Int]

  """Limit result set to products based on a maximum price."""
  maxPrice: Float

  """Limit result set to products based on a minimum price."""
  minPrice: Float

  """Limit result set to products on sale."""
  onSale: Boolean

  """What paramater to use to order the objects by."""
  orderby: [WCConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: Int

  """Specify objects whose parent is in an array"""
  parentIn: [Int]

  """Specify objects whose parent is not in an array"""
  parentNotIn: [Int]

  """Limit result set to products based on a keyword search."""
  search: String

  """Limit result set to products assigned a specific shipping class ID."""
  shippingClassId: Int

  """
  Limit result set to products with specific SKU(s). Use commas to separate.
  """
  sku: String

  """Limit result set to products with a specific slug."""
  slug: String

  """Limit result set to products assigned a specific status."""
  status: String

  """Limit result set to products in stock or out of stock."""
  stockStatus: [StockStatusEnum]

  """Limit result set to products assigned a specific tag name."""
  tag: String

  """Limit result set to products assigned a specific tag ID."""
  tagId: Int

  """Limit result set to products assigned to a specific group of tag IDs."""
  tagIn: [Int]

  """
  Limit result set to products not assigned to a specific group of tag IDs.
  """
  tagNotIn: [Int]

  """Limit result set to products assigned to a specific group of tag IDs."""
  tagSlugIn: [String]

  """
  Limit result set to products not assigned to a specific group of tag IDs.
  """
  tagSlugNotIn: [String]

  """Limit result set to products assigned a specific type."""
  type: ProductTypesEnum

  """Limit result set to products assigned to a group of specific types."""
  typeIn: [ProductTypesEnum]

  """
  Limit result set to products not assigned to a group of specific types.
  """
  typeNotIn: [ProductTypesEnum]

  """Limit result set to products with a specific visibility level."""
  visibility: CatalogVisibilityEnum
}

"""Connection between the Product type and the VariationAttribute type"""
type ProductToVariationAttributeConnection {
  """Edges for the ProductToVariationAttributeConnection connection"""
  edges: [ProductToVariationAttributeConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [VariationAttribute]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type ProductToVariationAttributeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: VariationAttribute
}

"""The productType type"""
type ProductType implements Node & TermNode & UniformResourceIdentifiable {
  """The number of objects connected to the object"""
  count: Int

  """Identifies the primary key from the database."""
  databaseId: Int!

  """The description of the object"""
  description: String

  """Connection between the TermNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): TermNodeToEnqueuedScriptConnection

  """Connection between the TermNode type and the EnqueuedStylesheet type"""
  enqueuedStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): TermNodeToEnqueuedStylesheetConnection

  """The globally unique ID for the object"""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """The id field matches the WP_Post-&gt;ID field."""
  productTypeId: Int @deprecated(reason: "Deprecated in favor of databaseId")

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """Connection between the productType type and the Taxonomy type"""
  taxonomy: ProductTypeToTaxonomyConnectionEdge

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String!
}

"""
The Type of Identifier used to fetch a single resource. Default is ID.
"""
enum ProductTypeIdType {
  """The Database ID for the node"""
  DATABASE_ID

  """The hashed Global ID"""
  ID

  """The name of the node"""
  NAME

  """Url friendly name of the node"""
  SLUG

  """The URI for the node"""
  URI
}

"""Connection between the productType type and the Taxonomy type"""
type ProductTypeToTaxonomyConnectionEdge {
  """The nodes of the connection, without the edges"""
  node: Taxonomy
}

"""Product type enumeration"""
enum ProductTypesEnum {
  """An external product"""
  EXTERNAL

  """A product group"""
  GROUPED

  """A simple product"""
  SIMPLE

  """A variable product"""
  VARIABLE

  """A product variation"""
  VARIATION
}

"""A product variation object"""
type ProductVariation {
  """
  Connection between the ProductVariation type and the VariationAttribute type
  """
  attributes(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): ProductVariationToVariationAttributeConnection

  """Product variation backorders"""
  backorders: BackordersEnum

  """Can product be backordered?"""
  backordersAllowed: Boolean

  """Product variation catalog visibility"""
  catalogVisibility: CatalogVisibilityEnum

  """Date variation created"""
  date: String

  """Date on sale from"""
  dateOnSaleFrom: String

  """Date on sale to"""
  dateOnSaleTo: String

  """Product description"""
  description: String

  """Download expiry"""
  downloadExpiry: Int

  """Download limit"""
  downloadLimit: Int

  """Is downloadable?"""
  downloadable: Boolean

  """Product downloads"""
  downloads: [ProductDownload]

  """Does product variation have any visible attributes"""
  hasAttributes: Boolean

  """Product variation height"""
  height: String

  """The globally unique identifier for the product variation"""
  id: ID!

  """Product variation main image"""
  image: MediaItem

  """Product variation length"""
  length: String

  """if/how product variation stock is managed"""
  manageStock: ManageStockEnum

  """Menu order"""
  menuOrder: Int

  """Date variation last updated"""
  modified: String

  """Product name"""
  name: String

  """Is variation on sale?"""
  onSale: Boolean

  """Product variation&#039;s active price"""
  price: String

  """If product variation can be bought"""
  purchasable: Boolean

  """Product variation purchase_note"""
  purchaseNote: String

  """Product variation&#039;s regular price"""
  regularPrice: String

  """Product variation&#039;s sale price"""
  salePrice: String

  """Product variation shipping class"""
  shippingClass: String

  """Product variation SKU (Stock-keeping unit)"""
  sku: String

  """Variation status"""
  status: String

  """Product variation stock quantity"""
  stockQuantity: Int

  """Product stock status"""
  stockStatus: StockStatusEnum

  """Product variation tax class"""
  taxClass: TaxClassEnum

  """Tax status"""
  taxStatus: TaxStatusEnum

  """Product type"""
  type: ProductTypesEnum

  """The Id of the order. Equivalent to WP_Post-&gt;ID"""
  variationId: Int

  """Is product virtual?"""
  virtual: Boolean

  """Product variation weight"""
  weight: String

  """Product variation width"""
  width: String
}

"""
Connection between the ProductVariation type and the VariationAttribute type
"""
type ProductVariationToVariationAttributeConnection {
  """
  Edges for the ProductVariationToVariationAttributeConnection connection
  """
  edges: [ProductVariationToVariationAttributeConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [VariationAttribute]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type ProductVariationToVariationAttributeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: VariationAttribute
}

"""A product rating counter"""
type RatingCounter {
  """Product&#039;s rating average"""
  average: Float

  """Product&#039;s number of 5-star ratings"""
  fiveStars: Int

  """Product&#039;s number of 4-star ratings"""
  fourStars: Int

  """Product&#039;s number of 1-star ratings"""
  oneStars: Int

  """Product&#039;s number of 3-star ratings"""
  threeStars: Int

  """Product&#039;s number of 2-star ratings"""
  twoStars: Int
}

"""The reading setting type"""
type ReadingSettings {
  """Blog pages show at most."""
  postsPerPage: Int
}

"""Input for the refreshJwtAuthToken mutation"""
input RefreshJwtAuthTokenInput {
  clientMutationId: String!

  """
  A valid, previously issued JWT refresh token. If valid a new Auth token will
  be provided. If invalid, expired, revoked or otherwise invalid, a new
  AuthToken will not be provided.
  """
  jwtRefreshToken: String!
}

"""The payload for the refreshJwtAuthToken mutation"""
type RefreshJwtAuthTokenPayload {
  """JWT Token that can be used in future requests for Authentication"""
  authToken: String
  clientMutationId: String!
}

"""A refund object"""
type Refund {
  """Refunded amount"""
  amount: Float

  """The globally unique identifier for the refund"""
  id: ID!

  """Connection between the Refund type and the LineItem type"""
  lineItems(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): RefundToLineItemConnection

  """Reason for refund"""
  reason: String

  """The Id of the order. Equivalent to WP_Post-&gt;ID"""
  refundId: Int

  """User who completed the refund"""
  refundedBy: User

  """A title for the new post type"""
  title: String
}

"""Connection between the Refund type and the LineItem type"""
type RefundToLineItemConnection {
  """Edges for the RefundToLineItemConnection connection"""
  edges: [RefundToLineItemConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [LineItem]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RefundToLineItemConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: LineItem
}

"""Input for the registerCustomer mutation"""
input RegisterCustomerInput {
  """User's AOL IM account."""
  aim: String

  """Customer billing information"""
  billing: CustomerAddressInput
  clientMutationId: String!

  """A string containing content about the user."""
  description: String

  """
  A string that will be shown on the site. Defaults to user's username. It is
  likely that you will want to change this, for both appearance and security
  through obscurity (that is if you dont use and delete the default admin user).
  """
  displayName: String

  """A string containing the user's email address."""
  email: String

  """	The user's first name."""
  firstName: String

  """User's Jabber account."""
  jabber: String

  """The user's last name."""
  lastName: String

  """User's locale."""
  locale: String

  """
  A string that contains a URL-friendly name for the user. The default is the user's username.
  """
  nicename: String

  """The user's nickname, defaults to the user's username."""
  nickname: String

  """A string that contains the plain text password for the user."""
  password: String

  """The date the user registered. Format is Y-m-d H:i:s."""
  registered: String

  """
  A string for whether to enable the rich editor or not. False if not empty.
  """
  richEditing: String

  """Customer shipping address"""
  shipping: CustomerAddressInput

  """Customer shipping is identical to billing address"""
  shippingSameAsBilling: Boolean

  """A string that contains the user's username."""
  username: String!

  """A string containing the user's URL for the user's web site."""
  websiteUrl: String

  """User's Yahoo IM account."""
  yim: String
}

"""The payload for the registerCustomer mutation"""
type RegisterCustomerPayload {
  clientMutationId: String!
  customer: Customer
  viewer: User
}

"""Input for the registerUser mutation"""
input RegisterUserInput {
  """User's AOL IM account."""
  aim: String
  clientMutationId: String!

  """A string containing content about the user."""
  description: String

  """
  A string that will be shown on the site. Defaults to user's username. It is
  likely that you will want to change this, for both appearance and security
  through obscurity (that is if you dont use and delete the default admin user).
  """
  displayName: String

  """A string containing the user's email address."""
  email: String

  """	The user's first name."""
  firstName: String

  """User's Jabber account."""
  jabber: String

  """The user's last name."""
  lastName: String

  """User's locale."""
  locale: String

  """
  A string that contains a URL-friendly name for the user. The default is the user's username.
  """
  nicename: String

  """The user's nickname, defaults to the user's username."""
  nickname: String

  """A string that contains the plain text password for the user."""
  password: String

  """If true, this will refresh the users JWT secret."""
  refreshJwtUserSecret: Boolean

  """The date the user registered. Format is Y-m-d H:i:s."""
  registered: String

  """
  If true, this will revoke the users JWT secret. If false, this will unrevoke
  the JWT secret AND issue a new one. To revoke, the user must have proper
  capabilities to edit users JWT secrets.
  """
  revokeJwtUserSecret: Boolean

  """
  A string for whether to enable the rich editor or not. False if not empty.
  """
  richEditing: String

  """A string that contains the user's username."""
  username: String!

  """A string containing the user's URL for the user's web site."""
  websiteUrl: String

  """User's Yahoo IM account."""
  yim: String
}

"""The payload for the registerUser mutation"""
type RegisterUserPayload {
  clientMutationId: String!
  user: User
}

"""
The logical relation between each item in the array when there are more than one.
"""
enum RelationEnum {
  AND
  OR
}

"""Input for the removeCoupons mutation"""
input RemoveCouponsInput {
  clientMutationId: String!

  """Code of coupon being applied"""
  codes: [String]
}

"""The payload for the removeCoupons mutation"""
type RemoveCouponsPayload {
  cart: Cart
  clientMutationId: String!
}

"""Input for the removeItemsFromCart mutation"""
input RemoveItemsFromCartInput {
  """Remove all cart items"""
  all: Boolean
  clientMutationId: String!

  """Item keys of the items being removed"""
  keys: [ID]
}

"""The payload for the removeItemsFromCart mutation"""
type RemoveItemsFromCartPayload {
  cartItems: [CartItem]
  clientMutationId: String!
}

"""Input for the resetUserPassword mutation"""
input ResetUserPasswordInput {
  clientMutationId: String!

  """Password reset key"""
  key: String

  """The user's login (username)."""
  login: String

  """The new password."""
  password: String
}

"""The payload for the resetUserPassword mutation"""
type ResetUserPasswordPayload {
  clientMutationId: String!
  user: User
}

"""Input for the restoreCartItems mutation"""
input RestoreCartItemsInput {
  clientMutationId: String!

  """Cart item key of the item being removed"""
  keys: [ID]
}

"""The payload for the restoreCartItems mutation"""
type RestoreCartItemsPayload {
  cartItems: [CartItem]
  clientMutationId: String!
}

"""Input for the restoreComment mutation"""
input RestoreCommentInput {
  clientMutationId: String!

  """The ID of the comment to be restored"""
  id: ID!
}

"""The payload for the restoreComment mutation"""
type RestoreCommentPayload {
  clientMutationId: String!

  """The restored comment object"""
  comment: Comment

  """The ID of the restored comment"""
  restoredId: ID
}

"""The root mutation"""
type RootMutation {
  """The payload for the UpdateCategory mutation"""
  updateCategory(
    """Input for the UpdateCategory mutation"""
    input: UpdateCategoryInput!
  ): UpdateCategoryPayload

  """The payload for the UpdatePostFormat mutation"""
  updatePostFormat(
    """Input for the UpdatePostFormat mutation"""
    input: UpdatePostFormatInput!
  ): UpdatePostFormatPayload

  """The payload for the UpdateProductCategory mutation"""
  updateProductCategory(
    """Input for the UpdateProductCategory mutation"""
    input: UpdateProductCategoryInput!
  ): UpdateProductCategoryPayload

  """The payload for the UpdateProductTag mutation"""
  updateProductTag(
    """Input for the UpdateProductTag mutation"""
    input: UpdateProductTagInput!
  ): UpdateProductTagPayload

  """The payload for the UpdateProductType mutation"""
  updateProductType(
    """Input for the UpdateProductType mutation"""
    input: UpdateProductTypeInput!
  ): UpdateProductTypePayload

  """The payload for the UpdateShippingClass mutation"""
  updateShippingClass(
    """Input for the UpdateShippingClass mutation"""
    input: UpdateShippingClassInput!
  ): UpdateShippingClassPayload

  """The payload for the UpdateTag mutation"""
  updateTag(
    """Input for the UpdateTag mutation"""
    input: UpdateTagInput!
  ): UpdateTagPayload

  """The payload for the UpdateVisibleProduct mutation"""
  updateVisibleProduct(
    """Input for the UpdateVisibleProduct mutation"""
    input: UpdateVisibleProductInput!
  ): UpdateVisibleProductPayload

  """The payload for the addFee mutation"""
  addFee(
    """Input for the addFee mutation"""
    input: AddFeeInput!
  ): AddFeePayload

  """The payload for the addToCart mutation"""
  addToCart(
    """Input for the addToCart mutation"""
    input: AddToCartInput!
  ): AddToCartPayload

  """The payload for the applyCoupon mutation"""
  applyCoupon(
    """Input for the applyCoupon mutation"""
    input: ApplyCouponInput!
  ): ApplyCouponPayload

  """The payload for the createCategory mutation"""
  createCategory(
    """Input for the createCategory mutation"""
    input: CreateCategoryInput!
  ): CreateCategoryPayload

  """The payload for the createComment mutation"""
  createComment(
    """Input for the createComment mutation"""
    input: CreateCommentInput!
  ): CreateCommentPayload

  """The payload for the createMediaItem mutation"""
  createMediaItem(
    """Input for the createMediaItem mutation"""
    input: CreateMediaItemInput!
  ): CreateMediaItemPayload

  """The payload for the createPage mutation"""
  createPage(
    """Input for the createPage mutation"""
    input: CreatePageInput!
  ): CreatePagePayload

  """The payload for the createPost mutation"""
  createPost(
    """Input for the createPost mutation"""
    input: CreatePostInput!
  ): CreatePostPayload

  """The payload for the createPostFormat mutation"""
  createPostFormat(
    """Input for the createPostFormat mutation"""
    input: CreatePostFormatInput!
  ): CreatePostFormatPayload

  """The payload for the createProductCategory mutation"""
  createProductCategory(
    """Input for the createProductCategory mutation"""
    input: CreateProductCategoryInput!
  ): CreateProductCategoryPayload

  """The payload for the createProductTag mutation"""
  createProductTag(
    """Input for the createProductTag mutation"""
    input: CreateProductTagInput!
  ): CreateProductTagPayload

  """The payload for the createProductType mutation"""
  createProductType(
    """Input for the createProductType mutation"""
    input: CreateProductTypeInput!
  ): CreateProductTypePayload

  """The payload for the createShippingClass mutation"""
  createShippingClass(
    """Input for the createShippingClass mutation"""
    input: CreateShippingClassInput!
  ): CreateShippingClassPayload

  """The payload for the createTag mutation"""
  createTag(
    """Input for the createTag mutation"""
    input: CreateTagInput!
  ): CreateTagPayload

  """The payload for the createUser mutation"""
  createUser(
    """Input for the createUser mutation"""
    input: CreateUserInput!
  ): CreateUserPayload

  """The payload for the createVisibleProduct mutation"""
  createVisibleProduct(
    """Input for the createVisibleProduct mutation"""
    input: CreateVisibleProductInput!
  ): CreateVisibleProductPayload

  """The payload for the deleteCategory mutation"""
  deleteCategory(
    """Input for the deleteCategory mutation"""
    input: DeleteCategoryInput!
  ): DeleteCategoryPayload

  """The payload for the deleteComment mutation"""
  deleteComment(
    """Input for the deleteComment mutation"""
    input: DeleteCommentInput!
  ): DeleteCommentPayload

  """The payload for the deleteMediaItem mutation"""
  deleteMediaItem(
    """Input for the deleteMediaItem mutation"""
    input: DeleteMediaItemInput!
  ): DeleteMediaItemPayload

  """The payload for the deletePage mutation"""
  deletePage(
    """Input for the deletePage mutation"""
    input: DeletePageInput!
  ): DeletePagePayload

  """The payload for the deletePost mutation"""
  deletePost(
    """Input for the deletePost mutation"""
    input: DeletePostInput!
  ): DeletePostPayload

  """The payload for the deletePostFormat mutation"""
  deletePostFormat(
    """Input for the deletePostFormat mutation"""
    input: DeletePostFormatInput!
  ): DeletePostFormatPayload

  """The payload for the deleteProductCategory mutation"""
  deleteProductCategory(
    """Input for the deleteProductCategory mutation"""
    input: DeleteProductCategoryInput!
  ): DeleteProductCategoryPayload

  """The payload for the deleteProductTag mutation"""
  deleteProductTag(
    """Input for the deleteProductTag mutation"""
    input: DeleteProductTagInput!
  ): DeleteProductTagPayload

  """The payload for the deleteProductType mutation"""
  deleteProductType(
    """Input for the deleteProductType mutation"""
    input: DeleteProductTypeInput!
  ): DeleteProductTypePayload

  """The payload for the deleteShippingClass mutation"""
  deleteShippingClass(
    """Input for the deleteShippingClass mutation"""
    input: DeleteShippingClassInput!
  ): DeleteShippingClassPayload

  """The payload for the deleteTag mutation"""
  deleteTag(
    """Input for the deleteTag mutation"""
    input: DeleteTagInput!
  ): DeleteTagPayload

  """The payload for the deleteUser mutation"""
  deleteUser(
    """Input for the deleteUser mutation"""
    input: DeleteUserInput!
  ): DeleteUserPayload

  """The payload for the deleteVisibleProduct mutation"""
  deleteVisibleProduct(
    """Input for the deleteVisibleProduct mutation"""
    input: DeleteVisibleProductInput!
  ): DeleteVisibleProductPayload

  """The payload for the emptyCart mutation"""
  emptyCart(
    """Input for the emptyCart mutation"""
    input: EmptyCartInput!
  ): EmptyCartPayload
  increaseCount(
    """The count to increase"""
    count: Int
  ): Int

  """The payload for the login mutation"""
  login(
    """Input for the login mutation"""
    input: LoginInput!
  ): LoginPayload

  """The payload for the refreshJwtAuthToken mutation"""
  refreshJwtAuthToken(
    """Input for the refreshJwtAuthToken mutation"""
    input: RefreshJwtAuthTokenInput!
  ): RefreshJwtAuthTokenPayload

  """The payload for the registerCustomer mutation"""
  registerCustomer(
    """Input for the registerCustomer mutation"""
    input: RegisterCustomerInput!
  ): RegisterCustomerPayload

  """The payload for the registerUser mutation"""
  registerUser(
    """Input for the registerUser mutation"""
    input: RegisterUserInput!
  ): RegisterUserPayload

  """The payload for the removeCoupons mutation"""
  removeCoupons(
    """Input for the removeCoupons mutation"""
    input: RemoveCouponsInput!
  ): RemoveCouponsPayload

  """The payload for the removeItemsFromCart mutation"""
  removeItemsFromCart(
    """Input for the removeItemsFromCart mutation"""
    input: RemoveItemsFromCartInput!
  ): RemoveItemsFromCartPayload

  """The payload for the resetUserPassword mutation"""
  resetUserPassword(
    """Input for the resetUserPassword mutation"""
    input: ResetUserPasswordInput!
  ): ResetUserPasswordPayload

  """The payload for the restoreCartItems mutation"""
  restoreCartItems(
    """Input for the restoreCartItems mutation"""
    input: RestoreCartItemsInput!
  ): RestoreCartItemsPayload

  """The payload for the restoreComment mutation"""
  restoreComment(
    """Input for the restoreComment mutation"""
    input: RestoreCommentInput!
  ): RestoreCommentPayload

  """The payload for the sendPasswordResetEmail mutation"""
  sendPasswordResetEmail(
    """Input for the sendPasswordResetEmail mutation"""
    input: SendPasswordResetEmailInput!
  ): SendPasswordResetEmailPayload

  """The payload for the updateComment mutation"""
  updateComment(
    """Input for the updateComment mutation"""
    input: UpdateCommentInput!
  ): UpdateCommentPayload

  """The payload for the updateCustomer mutation"""
  updateCustomer(
    """Input for the updateCustomer mutation"""
    input: UpdateCustomerInput!
  ): UpdateCustomerPayload

  """The payload for the updateItemQuantity mutation"""
  updateItemQuantity(
    """Input for the updateItemQuantity mutation"""
    input: UpdateItemQuantityInput!
  ): UpdateItemQuantityPayload

  """The payload for the updateMediaItem mutation"""
  updateMediaItem(
    """Input for the updateMediaItem mutation"""
    input: UpdateMediaItemInput!
  ): UpdateMediaItemPayload

  """The payload for the updatePage mutation"""
  updatePage(
    """Input for the updatePage mutation"""
    input: UpdatePageInput!
  ): UpdatePagePayload

  """The payload for the updatePost mutation"""
  updatePost(
    """Input for the updatePost mutation"""
    input: UpdatePostInput!
  ): UpdatePostPayload

  """The payload for the updateSettings mutation"""
  updateSettings(
    """Input for the updateSettings mutation"""
    input: UpdateSettingsInput!
  ): UpdateSettingsPayload

  """The payload for the updateUser mutation"""
  updateUser(
    """Input for the updateUser mutation"""
    input: UpdateUserInput!
  ): UpdateUserPayload
}

"""The root entry point into the Graph"""
type RootQuery {
  """Entry point to get all settings for the site"""
  allSettings: Settings

  """The cart object"""
  cart: Cart

  """The cart object"""
  cartFee(id: ID!): CartFee

  """The cart object"""
  cartItem(key: ID!): CartItem

  """Connection between the RootQuery type and the category type"""
  categories(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: RootQueryToCategoryConnectionWhereArgs
  ): RootQueryToCategoryConnection

  """A 0bject"""
  category(id: ID!, idType: CategoryIdType): Category

  """Returns a Comment"""
  comment(id: ID!): Comment

  """Connection between the RootQuery type and the Comment type"""
  comments(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: RootQueryToCommentConnectionWhereArgs
  ): RootQueryToCommentConnection

  """A node used to manage content"""
  contentNode(
    id: ID!

    """
    Type of unique identifier to fetch a content node by. Default is Global ID
    """
    idType: ContentNodeIdTypeEnum

    """
    The content type the node is used for. Required when idType is set to "name" or "slug"
    """
    contentType: ContentTypeEnum

    """Whether to return the node as a preview instance"""
    asPreview: Boolean
  ): ContentNode

  """Connection between the RootQuery type and the ContentNode type"""
  contentNodes(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: RootQueryToContentNodeConnectionWhereArgs
  ): RootQueryToContentNodeConnection

  """Fetch a Content Type node by unique Identifier"""
  contentType(
    """Unique Identifier for the Content Type node"""
    id: ID!

    """The type of Identifier used in the ID field"""
    idType: ContentTypeIdTypeEnum
  ): ContentType

  """Connection between the RootQuery type and the ContentType type"""
  contentTypes(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): RootQueryToContentTypeConnection

  """A coupon object"""
  coupon(id: ID!): Coupon

  """A coupon object"""
  couponBy(
    """Get the coupon by its global ID"""
    id: ID

    """Get the coupon by its database ID"""
    couponId: Int

    """Get the coupon by its code"""
    code: String
  ): Coupon

  """Connection between the RootQuery type and the Coupon type"""
  coupons(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: RootQueryToCouponConnectionWhereArgs
  ): RootQueryToCouponConnection

  """A customer object"""
  customer(id: ID): Customer

  """A customer object"""
  customerBy(
    """Get the customer by their database ID"""
    customerId: Int!
  ): Customer

  """Connection between the RootQuery type and the Customer type"""
  customers(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: RootQueryToCustomerConnectionWhereArgs
  ): RootQueryToCustomerConnection
  discussionSettings: DiscussionSettings
  generalSettings: GeneralSettings

  """An object of the mediaItem Type. """
  mediaItem(
    id: ID!
    idType: MediaItemIdType

    """Whether to return the node as a preview instance"""
    asPreview: Boolean
  ): MediaItem

  """A mediaItem object"""
  mediaItemBy(
    """Get the object by its global ID"""
    id: ID

    """Get the mediaItem by its database ID"""
    mediaItemId: Int

    """Get the mediaItem by its uri"""
    uri: String

    """
    Get the mediaItem by its slug (only available for non-hierarchical types)
    """
    slug: String
  ): MediaItem @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")

  """Connection between the RootQuery type and the mediaItem type"""
  mediaItems(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: RootQueryToMediaItemConnectionWhereArgs
  ): RootQueryToMediaItemConnection

  """A WordPress navigation menu"""
  menu(id: ID!): Menu

  """A WordPress navigation menu item"""
  menuItem(id: ID!): MenuItem

  """Connection between the RootQuery type and the MenuItem type"""
  menuItems(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: RootQueryToMenuItemConnectionWhereArgs
  ): RootQueryToMenuItemConnection

  """Connection between the RootQuery type and the Menu type"""
  menus(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: RootQueryToMenuConnectionWhereArgs
  ): RootQueryToMenuConnection

  """Fetches an object given its ID"""
  node(
    """The unique identifier of the node"""
    id: ID
  ): Node
  nodeByUri(
    """
    Unique Resource Identifier in the form of a path or permalink for a node. Ex: "/hello-world"
    """
    uri: String!
  ): UniformResourceIdentifiable

  """A order object"""
  order(id: ID!): Order

  """A order object"""
  orderBy(
    """Get the order by its global ID"""
    id: ID

    """Get the order by its database ID"""
    orderId: Int

    """Get the order by its order number"""
    orderKey: String
  ): Order

  """Connection between the RootQuery type and the Order type"""
  orders(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: RootQueryToOrderConnectionWhereArgs
  ): RootQueryToOrderConnection

  """An object of the page Type. """
  page(
    id: ID!
    idType: PageIdType

    """Whether to return the node as a preview instance"""
    asPreview: Boolean
  ): Page

  """A page object"""
  pageBy(
    """Get the object by its global ID"""
    id: ID

    """Get the page by its database ID"""
    pageId: Int

    """Get the page by its uri"""
    uri: String
  ): Page @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")

  """Connection between the RootQuery type and the page type"""
  pages(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: RootQueryToPageConnectionWhereArgs
  ): RootQueryToPageConnection

  """A WordPress plugin"""
  plugin(id: ID!): Plugin

  """Connection between the RootQuery type and the Plugin type"""
  plugins(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): RootQueryToPluginConnection

  """An object of the post Type. """
  post(
    id: ID!
    idType: PostIdType

    """Whether to return the node as a preview instance"""
    asPreview: Boolean
  ): Post

  """A post object"""
  postBy(
    """Get the object by its global ID"""
    id: ID

    """Get the post by its database ID"""
    postId: Int

    """Get the post by its uri"""
    uri: String

    """Get the post by its slug (only available for non-hierarchical types)"""
    slug: String
  ): Post @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")

  """A 0bject"""
  postFormat(id: ID!, idType: PostFormatIdType): PostFormat

  """Connection between the RootQuery type and the postFormat type"""
  postFormats(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: RootQueryToPostFormatConnectionWhereArgs
  ): RootQueryToPostFormatConnection

  """Connection between the RootQuery type and the post type"""
  posts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: RootQueryToPostConnectionWhereArgs
  ): RootQueryToPostConnection

  """A product object"""
  product(id: ID!): Product

  """A product object"""
  productBy(
    """Get the product by its global ID"""
    id: ID

    """Get the product by its database ID"""
    productId: Int
  ): Product

  """Connection between the RootQuery type and the productCategory type"""
  productCategories(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: RootQueryToProductCategoryConnectionWhereArgs
  ): RootQueryToProductCategoryConnection

  """A 0bject"""
  productCategory(id: ID!, idType: ProductCategoryIdType): ProductCategory

  """A 0bject"""
  productTag(id: ID!, idType: ProductTagIdType): ProductTag

  """Connection between the RootQuery type and the productTag type"""
  productTags(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: RootQueryToProductTagConnectionWhereArgs
  ): RootQueryToProductTagConnection

  """A 0bject"""
  productType(id: ID!, idType: ProductTypeIdType): ProductType

  """Connection between the RootQuery type and the productType type"""
  productTypes(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: RootQueryToProductTypeConnectionWhereArgs
  ): RootQueryToProductTypeConnection

  """A product variation object"""
  productVariation(
    """Get the product variation by its global ID"""
    id: ID

    """Get the product variation by its database ID"""
    variationId: Int
  ): ProductVariation

  """Connection between the RootQuery type and the Product type"""
  products(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: RootQueryToProductConnectionWhereArgs
  ): RootQueryToProductConnection
  readingSettings: ReadingSettings

  """A refund object"""
  refund(id: ID!): Refund

  """A refund object"""
  refundBy(
    """Get the refund by its global ID"""
    id: ID

    """Get the refund by its database ID"""
    refundId: Int
  ): Refund

  """Connection between the RootQuery type and the Refund type"""
  refunds(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: RootQueryToRefundConnectionWhereArgs
  ): RootQueryToRefundConnection

  """Connection between the RootQuery type and the EnqueuedScript type"""
  registeredScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): RootQueryToEnqueuedScriptConnection

  """Connection between the RootQuery type and the EnqueuedStylesheet type"""
  registeredStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): RootQueryToEnqueuedStylesheetConnection

  """
  Connection between the RootQuery type and the ContentRevisionUnion type
  """
  revisions(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: RootQueryToContentRevisionUnionConnectionWhereArgs
  ): RootQueryToContentRevisionUnionConnection

  """A 0bject"""
  shippingClass(id: ID!, idType: ShippingClassIdType): ShippingClass

  """Connection between the RootQuery type and the shippingClass type"""
  shippingClasses(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: RootQueryToShippingClassConnectionWhereArgs
  ): RootQueryToShippingClassConnection

  """A shipping method object"""
  shippingMethod(
    """Get the shipping method by its global ID"""
    id: ID

    """Get the shipping method by its database ID"""
    methodId: ID
  ): ShippingMethod

  """Connection between the RootQuery type and the ShippingMethod type"""
  shippingMethods(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): RootQueryToShippingMethodConnection

  """A 0bject"""
  tag(id: ID!, idType: TagIdType): Tag

  """Connection between the RootQuery type and the tag type"""
  tags(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: RootQueryToTagConnectionWhereArgs
  ): RootQueryToTagConnection

  """A tax rate object"""
  taxRate(
    """Get the tax rate by its global ID"""
    id: ID

    """Get the tax rate by its database ID"""
    rateId: Int
  ): TaxRate

  """Connection between the RootQuery type and the TaxRate type"""
  taxRates(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: RootQueryToTaxRateConnectionWhereArgs
  ): RootQueryToTaxRateConnection

  """Connection between the RootQuery type and the Taxonomy type"""
  taxonomies(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): RootQueryToTaxonomyConnection

  """Fetch a Taxonomy node by unique Identifier"""
  taxonomy(
    """Unique Identifier for the Taxonomy node"""
    id: ID!

    """The type of Identifier used in the ID field"""
    idType: TaxonomyIdTypeEnum
  ): Taxonomy

  """A node in a taxonomy used to group and relate content nodes"""
  termNode(
    id: ID!

    """
    Type of unique identifier to fetch a term node by. Default is Global ID
    """
    idType: TermNodeIdTypeEnum

    """
    The taxonomy of the tern node. Required when idType is set to "name" or "slug"
    """
    taxonomy: TaxonomyEnum
  ): TermNode

  """Connection between the RootQuery type and the TermNode type"""
  terms(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: RootQueryToTermNodeConnectionWhereArgs
  ): RootQueryToTermNodeConnection

  """A Theme object"""
  theme(id: ID!): Theme

  """Connection between the RootQuery type and the Theme type"""
  themes(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): RootQueryToThemeConnection

  """Returns a user"""
  user(id: ID!, idType: UserNodeIdTypeEnum): User

  """Returns a user role"""
  userRole(id: ID!): UserRole

  """Connection between the RootQuery type and the UserRole type"""
  userRoles(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): RootQueryToUserRoleConnection

  """Connection between the RootQuery type and the User type"""
  users(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: RootQueryToUserConnectionWhereArgs
  ): RootQueryToUserConnection

  """Returns the current user"""
  viewer: User

  """A 0bject"""
  visibleProduct(id: ID!, idType: VisibleProductIdType): VisibleProduct

  """Connection between the RootQuery type and the visibleProduct type"""
  visibleProducts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: RootQueryToVisibleProductConnectionWhereArgs
  ): RootQueryToVisibleProductConnection
  writingSettings: WritingSettings
}

"""Connection between the RootQuery type and the category type"""
type RootQueryToCategoryConnection {
  """Edges for the RootQueryToCategoryConnection connection"""
  edges: [RootQueryToCategoryConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Category]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToCategoryConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Category
}

"""Arguments for filtering the RootQueryToCategoryConnection connection"""
input RootQueryToCategoryConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the RootQuery type and the Comment type"""
type RootQueryToCommentConnection {
  """Edges for the RootQueryToCommentConnection connection"""
  edges: [RootQueryToCommentConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Comment]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToCommentConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Comment
}

"""Arguments for filtering the RootQueryToCommentConnection connection"""
input RootQueryToCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """Limit results to those affiliated with a given content object ID."""
  contentId: ID

  """Array of content object IDs to include affiliated comments for."""
  contentIdIn: [ID]

  """Array of content object IDs to exclude affiliated comments for."""
  contentIdNotIn: [ID]

  """Content object name to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [ContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be
  returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: OrderEnum

  """Field to order the comments by."""
  orderby: CommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """Array of parent IDs of comments *not* to retrieve children for."""
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Connection between the RootQuery type and the ContentNode type"""
type RootQueryToContentNodeConnection {
  """Edges for the RootQueryToContentNodeConnection connection"""
  edges: [RootQueryToContentNodeConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [ContentNode]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToContentNodeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ContentNode
}

"""
Arguments for filtering the RootQueryToContentNodeConnection connection
"""
input RootQueryToContentNodeConnectionWhereArgs {
  """The Types of content to filter"""
  contentTypes: [ContentTypeEnum]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """Title of the object"""
  title: String
}

"""
Connection between the RootQuery type and the ContentRevisionUnion type
"""
type RootQueryToContentRevisionUnionConnection {
  """Edges for the RootQueryToContentRevisionUnionConnection connection"""
  edges: [RootQueryToContentRevisionUnionConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [ContentRevisionUnion]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToContentRevisionUnionConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ContentRevisionUnion
}

"""
Arguments for filtering the RootQueryToContentRevisionUnionConnection connection
"""
input RootQueryToContentRevisionUnionConnectionWhereArgs {
  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the RootQuery type and the ContentType type"""
type RootQueryToContentTypeConnection {
  """Edges for the RootQueryToContentTypeConnection connection"""
  edges: [RootQueryToContentTypeConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [ContentType]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToContentTypeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ContentType
}

"""Connection between the RootQuery type and the Coupon type"""
type RootQueryToCouponConnection {
  """Edges for the RootQueryToCouponConnection connection"""
  edges: [RootQueryToCouponConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Coupon]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToCouponConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Coupon
}

"""Arguments for filtering the RootQueryToCouponConnection connection"""
input RootQueryToCouponConnectionWhereArgs {
  """Limit result set to resources with a specific code."""
  code: String

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """Ensure result set excludes specific IDs."""
  exclude: [Int]

  """Limit result set to specific ids."""
  include: [Int]

  """What paramater to use to order the objects by."""
  orderby: [WCConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: Int

  """Specify objects whose parent is in an array"""
  parentIn: [Int]

  """Specify objects whose parent is not in an array"""
  parentNotIn: [Int]

  """Limit results to those matching a string."""
  search: String
}

"""Connection between the RootQuery type and the Customer type"""
type RootQueryToCustomerConnection {
  """Edges for the RootQueryToCustomerConnection connection"""
  edges: [RootQueryToCustomerConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Customer]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToCustomerConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Customer
}

"""Arguments for filtering the RootQueryToCustomerConnection connection"""
input RootQueryToCustomerConnectionWhereArgs {
  """Limit result set to resources with a specific email."""
  email: String

  """Ensure result set excludes specific IDs."""
  exclude: [Int]

  """Limit result set to specific ids."""
  include: [Int]

  """Order of results."""
  order: OrderEnum

  """Order results by a specific field."""
  orderby: CustomerConnectionOrderbyEnum

  """Limit result set to resources with a specific role."""
  role: UserRoleEnum

  """Limit result set to resources with a specific group of roles."""
  roleIn: [UserRoleEnum]

  """Limit result set to resources not within a specific group of roles."""
  roleNotIn: [UserRoleEnum]

  """Limit results to those matching a string."""
  search: String
}

"""Connection between the RootQuery type and the EnqueuedScript type"""
type RootQueryToEnqueuedScriptConnection {
  """Edges for the RootQueryToEnqueuedScriptConnection connection"""
  edges: [RootQueryToEnqueuedScriptConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [EnqueuedScript]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToEnqueuedScriptConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: EnqueuedScript
}

"""Connection between the RootQuery type and the EnqueuedStylesheet type"""
type RootQueryToEnqueuedStylesheetConnection {
  """Edges for the RootQueryToEnqueuedStylesheetConnection connection"""
  edges: [RootQueryToEnqueuedStylesheetConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [EnqueuedStylesheet]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToEnqueuedStylesheetConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: EnqueuedStylesheet
}

"""Connection between the RootQuery type and the mediaItem type"""
type RootQueryToMediaItemConnection {
  """Edges for the RootQueryToMediaItemConnection connection"""
  edges: [RootQueryToMediaItemConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [MediaItem]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToMediaItemConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: MediaItem
}

"""Arguments for filtering the RootQueryToMediaItemConnection connection"""
input RootQueryToMediaItemConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the RootQuery type and the Menu type"""
type RootQueryToMenuConnection {
  """Edges for the RootQueryToMenuConnection connection"""
  edges: [RootQueryToMenuConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Menu]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToMenuConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Menu
}

"""Arguments for filtering the RootQueryToMenuConnection connection"""
input RootQueryToMenuConnectionWhereArgs {
  """The ID of the object"""
  id: Int

  """The menu location for the menu being queried"""
  location: MenuLocationEnum

  """The slug of the menu to query items for"""
  slug: String
}

"""Connection between the RootQuery type and the MenuItem type"""
type RootQueryToMenuItemConnection {
  """Edges for the RootQueryToMenuItemConnection connection"""
  edges: [RootQueryToMenuItemConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [MenuItem]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToMenuItemConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: MenuItem
}

"""Arguments for filtering the RootQueryToMenuItemConnection connection"""
input RootQueryToMenuItemConnectionWhereArgs {
  """The ID of the object"""
  id: Int

  """The menu location for the menu being queried"""
  location: MenuLocationEnum

  """The database ID of the parent menu object"""
  parentDatabaseId: Int

  """The ID of the parent menu object"""
  parentId: ID
}

"""Connection between the RootQuery type and the Order type"""
type RootQueryToOrderConnection {
  """Edges for the RootQueryToOrderConnection connection"""
  edges: [RootQueryToOrderConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Order]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToOrderConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Order
}

"""Arguments for filtering the RootQueryToOrderConnection connection"""
input RootQueryToOrderConnectionWhereArgs {
  """Limit result set to orders assigned a specific customer."""
  customerId: Int

  """Limit result set to orders assigned a specific group of customers."""
  customersIn: [Int]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """Ensure result set excludes specific IDs."""
  exclude: [Int]

  """Limit result set to specific ids."""
  include: [Int]

  """What paramater to use to order the objects by."""
  orderby: [WCConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: Int

  """Specify objects whose parent is in an array"""
  parentIn: [Int]

  """Specify objects whose parent is not in an array"""
  parentNotIn: [Int]

  """Limit result set to orders assigned a specific product."""
  productId: Int

  """Limit results to those matching a string."""
  search: String

  """Limit result set to orders assigned a specific status."""
  statuses: [OrderStatusEnum]
}

"""Connection between the RootQuery type and the page type"""
type RootQueryToPageConnection {
  """Edges for the RootQueryToPageConnection connection"""
  edges: [RootQueryToPageConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Page]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToPageConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Page
}

"""Arguments for filtering the RootQueryToPageConnection connection"""
input RootQueryToPageConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the RootQuery type and the Plugin type"""
type RootQueryToPluginConnection {
  """Edges for the RootQueryToPluginConnection connection"""
  edges: [RootQueryToPluginConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Plugin]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToPluginConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Plugin
}

"""Connection between the RootQuery type and the post type"""
type RootQueryToPostConnection {
  """Edges for the RootQueryToPostConnection connection"""
  edges: [RootQueryToPostConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Post]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToPostConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Post
}

"""Arguments for filtering the RootQueryToPostConnection connection"""
input RootQueryToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Category ID"""
  categoryId: Int

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]

  """Use Category Slug"""
  categoryName: String

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """Tag Slug"""
  tag: String

  """Use Tag ID"""
  tagId: String

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagIn: [ID]

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagNotIn: [ID]

  """Array of tag slugs, used to display objects from one tag OR another"""
  tagSlugAnd: [String]

  """Array of tag slugs, used to exclude objects in specified tags"""
  tagSlugIn: [String]

  """Title of the object"""
  title: String
}

"""Connection between the RootQuery type and the postFormat type"""
type RootQueryToPostFormatConnection {
  """Edges for the RootQueryToPostFormatConnection connection"""
  edges: [RootQueryToPostFormatConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [PostFormat]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToPostFormatConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: PostFormat
}

"""
Arguments for filtering the RootQueryToPostFormatConnection connection
"""
input RootQueryToPostFormatConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the RootQuery type and the productCategory type"""
type RootQueryToProductCategoryConnection {
  """Edges for the RootQueryToProductCategoryConnection connection"""
  edges: [RootQueryToProductCategoryConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [ProductCategory]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToProductCategoryConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ProductCategory
}

"""
Arguments for filtering the RootQueryToProductCategoryConnection connection
"""
input RootQueryToProductCategoryConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the RootQuery type and the Product type"""
type RootQueryToProductConnection {
  """Edges for the RootQueryToProductConnection connection"""
  edges: [RootQueryToProductConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Product]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToProductConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Product
}

"""Arguments for filtering the RootQueryToProductConnection connection"""
input RootQueryToProductConnectionWhereArgs {
  """
  Limit result set to products with a specific attribute. Use the taxonomy name/attribute slug.
  """
  attribute: String

  """
  Limit result set to products with a specific attribute term ID (required an assigned attribute).
  """
  attributeTerm: String

  """Limit result set to products assigned a specific category name."""
  category: Int

  """
  Limit result set to products assigned to a specific group of category IDs.
  """
  categoryIn: [Int]

  """Limit result set to products assigned a specific category name."""
  categoryName: String

  """
  Limit result set to products assigned to a group of specific categories by name.
  """
  categoryNameIn: [String]

  """
  Limit result set to products not assigned to a group of specific categories by name.
  """
  categoryNameNotIn: [String]

  """
  Limit result set to products not assigned to a specific group of category IDs.
  """
  categoryNotIn: [Int]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """Ensure result set excludes specific IDs."""
  exclude: [Int]

  """Limit result set to featured products."""
  featured: Boolean

  """Limit result set to specific ids."""
  include: [Int]

  """Limit result set to products based on a maximum price."""
  maxPrice: Float

  """Limit result set to products based on a minimum price."""
  minPrice: Float

  """Limit result set to products on sale."""
  onSale: Boolean

  """What paramater to use to order the objects by."""
  orderby: [WCConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: Int

  """Specify objects whose parent is in an array"""
  parentIn: [Int]

  """Specify objects whose parent is not in an array"""
  parentNotIn: [Int]

  """Limit result set to products based on a keyword search."""
  search: String

  """Limit result set to products assigned a specific shipping class ID."""
  shippingClassId: Int

  """
  Limit result set to products with specific SKU(s). Use commas to separate.
  """
  sku: String

  """Limit result set to products with a specific slug."""
  slug: String

  """Limit result set to products assigned a specific status."""
  status: String

  """Limit result set to products in stock or out of stock."""
  stockStatus: [StockStatusEnum]

  """Limit result set to products assigned a specific tag name."""
  tag: String

  """Limit result set to products assigned a specific tag ID."""
  tagId: Int

  """Limit result set to products assigned to a specific group of tag IDs."""
  tagIn: [Int]

  """
  Limit result set to products not assigned to a specific group of tag IDs.
  """
  tagNotIn: [Int]

  """Limit result set to products assigned to a specific group of tag IDs."""
  tagSlugIn: [String]

  """
  Limit result set to products not assigned to a specific group of tag IDs.
  """
  tagSlugNotIn: [String]

  """Limit result set to products assigned a specific type."""
  type: ProductTypesEnum

  """Limit result set to products assigned to a group of specific types."""
  typeIn: [ProductTypesEnum]

  """
  Limit result set to products not assigned to a group of specific types.
  """
  typeNotIn: [ProductTypesEnum]

  """Limit result set to products with a specific visibility level."""
  visibility: CatalogVisibilityEnum
}

"""Connection between the RootQuery type and the productTag type"""
type RootQueryToProductTagConnection {
  """Edges for the RootQueryToProductTagConnection connection"""
  edges: [RootQueryToProductTagConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [ProductTag]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToProductTagConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ProductTag
}

"""
Arguments for filtering the RootQueryToProductTagConnection connection
"""
input RootQueryToProductTagConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the RootQuery type and the productType type"""
type RootQueryToProductTypeConnection {
  """Edges for the RootQueryToProductTypeConnection connection"""
  edges: [RootQueryToProductTypeConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [ProductType]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToProductTypeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ProductType
}

"""
Arguments for filtering the RootQueryToProductTypeConnection connection
"""
input RootQueryToProductTypeConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the RootQuery type and the Refund type"""
type RootQueryToRefundConnection {
  """Edges for the RootQueryToRefundConnection connection"""
  edges: [RootQueryToRefundConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Refund]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToRefundConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Refund
}

"""Arguments for filtering the RootQueryToRefundConnection connection"""
input RootQueryToRefundConnectionWhereArgs {
  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """Ensure result set excludes specific IDs."""
  exclude: [Int]

  """Limit result set to specific ids."""
  include: [Int]

  """Limit result set to refunds from a specific group of order IDs."""
  orderIn: [Int]

  """What paramater to use to order the objects by."""
  orderby: [WCConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: Int

  """Specify objects whose parent is in an array"""
  parentIn: [Int]

  """Specify objects whose parent is not in an array"""
  parentNotIn: [Int]

  """Limit results to those matching a string."""
  search: String

  """Limit result set to refunds assigned a specific status."""
  statuses: [String]
}

"""Connection between the RootQuery type and the shippingClass type"""
type RootQueryToShippingClassConnection {
  """Edges for the RootQueryToShippingClassConnection connection"""
  edges: [RootQueryToShippingClassConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [ShippingClass]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToShippingClassConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ShippingClass
}

"""
Arguments for filtering the RootQueryToShippingClassConnection connection
"""
input RootQueryToShippingClassConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the RootQuery type and the ShippingMethod type"""
type RootQueryToShippingMethodConnection {
  """Edges for the RootQueryToShippingMethodConnection connection"""
  edges: [RootQueryToShippingMethodConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [ShippingMethod]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToShippingMethodConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ShippingMethod
}

"""Connection between the RootQuery type and the tag type"""
type RootQueryToTagConnection {
  """Edges for the RootQueryToTagConnection connection"""
  edges: [RootQueryToTagConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Tag]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToTagConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Tag
}

"""Arguments for filtering the RootQueryToTagConnection connection"""
input RootQueryToTagConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the RootQuery type and the TaxRate type"""
type RootQueryToTaxRateConnection {
  """Edges for the RootQueryToTaxRateConnection connection"""
  edges: [RootQueryToTaxRateConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [TaxRate]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToTaxRateConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: TaxRate
}

"""Arguments for filtering the RootQueryToTaxRateConnection connection"""
input RootQueryToTaxRateConnectionWhereArgs {
  """Sort by tax class"""
  class: String

  """What paramater to use to order the objects by."""
  orderby: [TaxRateConnectionOrderbyInput]
}

"""Connection between the RootQuery type and the Taxonomy type"""
type RootQueryToTaxonomyConnection {
  """Edges for the RootQueryToTaxonomyConnection connection"""
  edges: [RootQueryToTaxonomyConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Taxonomy]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToTaxonomyConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Taxonomy
}

"""Connection between the RootQuery type and the TermNode type"""
type RootQueryToTermNodeConnection {
  """Edges for the RootQueryToTermNodeConnection connection"""
  edges: [RootQueryToTermNodeConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [TermNode]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToTermNodeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: TermNode
}

"""Arguments for filtering the RootQueryToTermNodeConnection connection"""
input RootQueryToTermNodeConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """The Taxonomy to filter terms by"""
  taxonomies: [TaxonomyEnum]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Connection between the RootQuery type and the Theme type"""
type RootQueryToThemeConnection {
  """Edges for the RootQueryToThemeConnection connection"""
  edges: [RootQueryToThemeConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Theme]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToThemeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Theme
}

"""Connection between the RootQuery type and the User type"""
type RootQueryToUserConnection {
  """Edges for the RootQueryToUserConnection connection"""
  edges: [RootQueryToUserConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [User]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToUserConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: User
}

"""Arguments for filtering the RootQueryToUserConnection connection"""
input RootQueryToUserConnectionWhereArgs {
  """Array of userIds to exclude."""
  exclude: [Int]

  """
  Pass an array of post types to filter results to users who have published posts in those post types.
  """
  hasPublishedPosts: [ContentTypeEnum]

  """Array of userIds to include."""
  include: [Int]

  """The user login."""
  login: String

  """
  An array of logins to include. Users matching one of these logins will be included in results.
  """
  loginIn: Int

  """
  An array of logins to exclude. Users matching one of these logins will not be included in results.
  """
  loginNotIn: Int

  """The user nicename."""
  nicename: String

  """
  An array of nicenames to include. Users matching one of these nicenames will be included in results.
  """
  nicenameIn: [String]

  """
  An array of nicenames to exclude. Users matching one of these nicenames will not be included in results.
  """
  nicenameNotIn: [String]

  """What paramater to use to order the objects by."""
  orderby: [UsersConnectionOrderbyInput]

  """
  An array of role names that users must match to be included in results. Note
  that this is an inclusive list: users must match *each* role.
  """
  role: UserRoleEnum

  """
  An array of role names. Matched users must have at least one of these roles.
  """
  roleIn: [UserRoleEnum]

  """
  An array of role names to exclude. Users matching one or more of these roles will not be included in results.
  """
  roleNotIn: [UserRoleEnum]

  """
  Search keyword. Searches for possible string matches on columns. When
  "searchColumns" is left empty, it tries to determine which column to search in
  based on search string.
  """
  search: String

  """
  Array of column names to be searched. Accepts 'ID', 'login', 'nicename', 'email', 'url'.
  """
  searchColumns: [String]
}

"""Connection between the RootQuery type and the UserRole type"""
type RootQueryToUserRoleConnection {
  """Edges for the RootQueryToUserRoleConnection connection"""
  edges: [RootQueryToUserRoleConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [UserRole]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToUserRoleConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: UserRole
}

"""Connection between the RootQuery type and the visibleProduct type"""
type RootQueryToVisibleProductConnection {
  """Edges for the RootQueryToVisibleProductConnection connection"""
  edges: [RootQueryToVisibleProductConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [VisibleProduct]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type RootQueryToVisibleProductConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: VisibleProduct
}

"""
Arguments for filtering the RootQueryToVisibleProductConnection connection
"""
input RootQueryToVisibleProductConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """Array of term ids to include. Default empty array."""
  include: [ID]

  """Array of names to return term(s) for. Default empty."""
  name: [String]

  """Retrieve terms where the name is LIKE the input value. Default empty."""
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """Field(s) to order terms by. Defaults to 'name'."""
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """Parent term ID to retrieve direct-child terms of. Default empty."""
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """Array of slugs to return term(s) for. Default empty."""
  slug: [String]

  """Array of term taxonomy IDs, to match when querying terms."""
  termTaxonomId: [ID]

  """Whether to prime meta caches for matched terms. Default true."""
  updateTermMetaCache: Boolean
}

"""Input for the sendPasswordResetEmail mutation"""
input SendPasswordResetEmailInput {
  clientMutationId: String!

  """A string that contains the user's username or email address."""
  username: String!
}

"""The payload for the sendPasswordResetEmail mutation"""
type SendPasswordResetEmailPayload {
  clientMutationId: String!

  """The user that the password reset email was sent to"""
  user: User
}

"""All of the registered settings"""
type Settings {
  """Allow people to submit comments on new posts."""
  discussionSettingsDefaultCommentStatus: String

  """
  Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.
  """
  discussionSettingsDefaultPingStatus: String

  """A date format for all date strings."""
  generalSettingsDateFormat: String

  """Site tagline."""
  generalSettingsDescription: String

  """This address is used for admin purposes, like new user notification."""
  generalSettingsEmail: String

  """WordPress locale code."""
  generalSettingsLanguage: String

  """A day number of the week that the week should start on."""
  generalSettingsStartOfWeek: Int

  """A time format for all time strings."""
  generalSettingsTimeFormat: String

  """A city in the same timezone as you."""
  generalSettingsTimezone: String

  """Site title."""
  generalSettingsTitle: String

  """Site URL."""
  generalSettingsUrl: String

  """Blog pages show at most."""
  readingSettingsPostsPerPage: Int

  """Default post category."""
  writingSettingsDefaultCategory: Int

  """Default post format."""
  writingSettingsDefaultPostFormat: String

  """Convert emoticons like :-) and :-P to graphics on display."""
  writingSettingsUseSmilies: Boolean
}

"""The shippingClass type"""
type ShippingClass implements Node & TermNode & UniformResourceIdentifiable {
  """The number of objects connected to the object"""
  count: Int

  """Identifies the primary key from the database."""
  databaseId: Int!

  """The description of the object"""
  description: String

  """Connection between the TermNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): TermNodeToEnqueuedScriptConnection

  """Connection between the TermNode type and the EnqueuedStylesheet type"""
  enqueuedStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): TermNodeToEnqueuedStylesheetConnection

  """The globally unique ID for the object"""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """The id field matches the WP_Post-&gt;ID field."""
  shippingClassId: Int @deprecated(reason: "Deprecated in favor of databaseId")

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """Connection between the shippingClass type and the Taxonomy type"""
  taxonomy: ShippingClassToTaxonomyConnectionEdge

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String!
}

"""
The Type of Identifier used to fetch a single resource. Default is ID.
"""
enum ShippingClassIdType {
  """The Database ID for the node"""
  DATABASE_ID

  """The hashed Global ID"""
  ID

  """The name of the node"""
  NAME

  """Url friendly name of the node"""
  SLUG

  """The URI for the node"""
  URI
}

"""Connection between the shippingClass type and the Taxonomy type"""
type ShippingClassToTaxonomyConnectionEdge {
  """The nodes of the connection, without the edges"""
  node: Taxonomy
}

"""a shipping line object"""
type ShippingLine {
  """The Id of the order item."""
  itemId: Int

  """Shipping Line&#039;s shipping method name"""
  methodTitle: String

  """The Id of the order the order item belongs to."""
  orderId: Int

  """Shipping Line&#039;s shipping method"""
  shippingMethod: ShippingMethod

  """Line tax class"""
  taxClass: TaxClassEnum

  """Line taxes"""
  taxes: [OrderItemTax]

  """Line total (after discounts)"""
  total: String

  """Line total tax (after discounts)"""
  totalTax: String
}

"""A shipping method object"""
type ShippingMethod {
  """Shipping method description."""
  description: String

  """The globally unique identifier for the tax rate."""
  id: ID!

  """The ID of the shipping method."""
  methodId: ID!

  """Shipping method title."""
  title: String
}

"""Product stock status enumeration"""
enum StockStatusEnum {
  IN_STOCK
  ON_BACKORDER
  OUT_OF_STOCK
}

"""The tag type"""
type Tag implements Node & TermNode & UniformResourceIdentifiable {
  """The number of objects connected to the object"""
  count: Int

  """Identifies the primary key from the database."""
  databaseId: Int!

  """The description of the object"""
  description: String

  """Connection between the TermNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): TermNodeToEnqueuedScriptConnection

  """Connection between the TermNode type and the EnqueuedStylesheet type"""
  enqueuedStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): TermNodeToEnqueuedStylesheetConnection

  """The globally unique ID for the object"""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """Connection between the tag type and the post type"""
  posts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: TagToPostConnectionWhereArgs
  ): TagToPostConnection

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """The id field matches the WP_Post-&gt;ID field."""
  tagId: Int @deprecated(reason: "Deprecated in favor of databaseId")

  """Connection between the tag type and the Taxonomy type"""
  taxonomy: TagToTaxonomyConnectionEdge

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String!
}

"""
The Type of Identifier used to fetch a single resource. Default is ID.
"""
enum TagIdType {
  """The Database ID for the node"""
  DATABASE_ID

  """The hashed Global ID"""
  ID

  """The name of the node"""
  NAME

  """Url friendly name of the node"""
  SLUG

  """The URI for the node"""
  URI
}

"""Connection between the tag type and the post type"""
type TagToPostConnection {
  """Edges for the TagToPostConnection connection"""
  edges: [TagToPostConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Post]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type TagToPostConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Post
}

"""Arguments for filtering the TagToPostConnection connection"""
input TagToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Category ID"""
  categoryId: Int

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]

  """Use Category Slug"""
  categoryName: String

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """Tag Slug"""
  tag: String

  """Use Tag ID"""
  tagId: String

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagIn: [ID]

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagNotIn: [ID]

  """Array of tag slugs, used to display objects from one tag OR another"""
  tagSlugAnd: [String]

  """Array of tag slugs, used to exclude objects in specified tags"""
  tagSlugIn: [String]

  """Title of the object"""
  title: String
}

"""Connection between the tag type and the Taxonomy type"""
type TagToTaxonomyConnectionEdge {
  """The nodes of the connection, without the edges"""
  node: Taxonomy
}

"""Tax class enumeration"""
enum TaxClassEnum {
  """Inherits Tax class from cart"""
  INHERIT_CART
  REDUCED_RATE

  """Standard Tax rate"""
  STANDARD
  ZERO_RATE
}

"""a tax line object"""
type TaxLine {
  """Is this a compound tax rate?"""
  isCompound: Boolean

  """The Id of the order item."""
  itemId: Int

  """Tax rate label"""
  label: String

  """The Id of the order the order item belongs to."""
  orderId: Int

  """Tax rate code/name"""
  rateCode: String

  """Tax line&#039;s shipping tax total"""
  shippingTaxTotal: String

  """Tax line&#039;s tax rate"""
  taxRate: TaxRate

  """Tax total (not including shipping taxes)"""
  taxTotal: String
}

"""A Tax rate object"""
type TaxRate {
  """City name."""
  city: [String]

  """Tax class. Default is standard."""
  class: TaxClassEnum

  """Whether or not this is a compound rate."""
  compound: Boolean

  """Country ISO 3166 code."""
  country: String

  """The globally unique identifier for the tax rate."""
  id: ID!

  """Tax rate name."""
  name: String

  """Indicates the order that will appear in queries."""
  order: Int

  """Postcode/ZIP."""
  postcode: [String]

  """Tax priority."""
  priority: Int

  """Tax rate."""
  rate: String

  """The ID of the tax rate."""
  rateId: Int

  """Whether or not this tax rate also gets applied to shipping."""
  shipping: Boolean

  """State code."""
  state: String
}

"""Field to order the connection by"""
enum TaxRateConnectionOrderbyEnum {
  ID
  ORDER
}

"""Options for ordering the connection"""
input TaxRateConnectionOrderbyInput {
  field: TaxRateConnectionOrderbyEnum!
  order: OrderEnum
}

"""Product tax status enumeration"""
enum TaxStatusEnum {
  NONE
  SHIPPING
  TAXABLE
}

"""A taxonomy object"""
type Taxonomy implements Node {
  """List of Content Types associated with the Taxonomy"""
  connectedContentTypes(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): TaxonomyToContentTypeConnection

  """
  Description of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;description
  """
  description: String

  """The plural name of the post type within the GraphQL Schema."""
  graphqlPluralName: String

  """The singular name of the post type within the GraphQL Schema."""
  graphqlSingleName: String

  """Whether the taxonomy is hierarchical"""
  hierarchical: Boolean

  """The globally unique identifier of the taxonomy object."""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """Name of the taxonomy shown in the menu. Usually plural."""
  label: String

  """
  The display name of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;label
  """
  name: String

  """Whether the taxonomy is publicly queryable"""
  public: Boolean

  """
  Name of content type to diplay in REST API &quot;wp/v2&quot; namespace.
  """
  restBase: String

  """The REST Controller class assigned to handling this content type."""
  restControllerClass: String

  """
  Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP_Taxonomy-&gt;show_tagcloud
  """
  showCloud: Boolean

  """
  Whether to display a column for the taxonomy on its post type listing screens.
  """
  showInAdminColumn: Boolean

  """Whether to add the post type to the GraphQL Schema."""
  showInGraphql: Boolean

  """Whether to show the taxonomy in the admin menu"""
  showInMenu: Boolean

  """Whether the taxonomy is available for selection in navigation menus."""
  showInNavMenus: Boolean

  """Whether to show the taxonomy in the quick/bulk edit panel."""
  showInQuickEdit: Boolean

  """
  Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace.
  """
  showInRest: Boolean

  """
  Whether to generate and allow a UI for managing terms in this taxonomy in the admin
  """
  showUi: Boolean
}

"""Allowed taxonomies"""
enum TaxonomyEnum {
  CATEGORY
  POSTFORMAT
  PRODUCTCATEGORY
  PRODUCTTAG
  PRODUCTTYPE
  SHIPPINGCLASS
  TAG
  VISIBLEPRODUCT
}

"""
The Type of Identifier used to fetch a single Taxonomy node. To be used along with the "id" field. Default is "ID".
"""
enum TaxonomyIdTypeEnum {
  """The globally unique ID"""
  ID

  """The name of the taxonomy"""
  NAME
}

"""Connection between the Taxonomy type and the ContentType type"""
type TaxonomyToContentTypeConnection {
  """Edges for the TaxonomyToContentTypeConnection connection"""
  edges: [TaxonomyToContentTypeConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [ContentType]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type TaxonomyToContentTypeConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ContentType
}

"""
Terms are nodes within a Taxonomy, used to group and relate other nodes.
"""
interface TermNode {
  """The number of objects connected to the object"""
  count: Int

  """Identifies the primary key from the database."""
  databaseId: Int!

  """The description of the object"""
  description: String

  """Connection between the TermNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): TermNodeToEnqueuedScriptConnection

  """Connection between the TermNode type and the EnqueuedStylesheet type"""
  enqueuedStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): TermNodeToEnqueuedStylesheetConnection

  """Unique identifier for the term"""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String!
}

"""
The Type of Identifier used to fetch a single resource. Default is "ID". To be used along with the "id" field.
"""
enum TermNodeIdTypeEnum {
  """The Database ID for the node"""
  DATABASE_ID

  """The hashed Global ID"""
  ID

  """The name of the node"""
  NAME

  """Url friendly name of the node"""
  SLUG

  """The URI for the node"""
  URI
}

"""Connection between the TermNode type and the EnqueuedScript type"""
type TermNodeToEnqueuedScriptConnection {
  """Edges for the TermNodeToEnqueuedScriptConnection connection"""
  edges: [TermNodeToEnqueuedScriptConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [EnqueuedScript]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type TermNodeToEnqueuedScriptConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: EnqueuedScript
}

"""Connection between the TermNode type and the EnqueuedStylesheet type"""
type TermNodeToEnqueuedStylesheetConnection {
  """Edges for the TermNodeToEnqueuedStylesheetConnection connection"""
  edges: [TermNodeToEnqueuedStylesheetConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [EnqueuedStylesheet]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type TermNodeToEnqueuedStylesheetConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: EnqueuedStylesheet
}

"""Options for ordering the connection by"""
enum TermObjectsConnectionOrderbyEnum {
  COUNT
  DESCRIPTION
  NAME
  SLUG
  TERM_GROUP
  TERM_ID
  TERM_ORDER
}

"""A theme object"""
type Theme implements Node {
  """
  Name of the theme author(s), could also be a company name. This field is
  equivalent to WP_Theme-&gt;get( &quot;Author&quot; ).
  """
  author: String

  """
  URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;AuthorURI&quot; ).
  """
  authorUri: String

  """
  The description of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Description&quot; ).
  """
  description: String

  """The globally unique identifier of the theme object."""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """
  Display name of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Name&quot; ).
  """
  name: String

  """
  The URL of the screenshot for the theme. The screenshot is intended to give an
  overview of what the theme looks like. This field is equivalent to
  WP_Theme-&gt;get_screenshot().
  """
  screenshot: String

  """
  The theme slug is used to internally match themes. Theme slugs can have
  subdirectories like: my-theme/sub-theme. This field is equivalent to
  WP_Theme-&gt;get_stylesheet().
  """
  slug: String

  """
  URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;Tags&quot; ).
  """
  tags: [String]

  """
  A URI if the theme has a website associated with it. The Theme URI is handy
  for directing users to a theme site for support etc. This field is equivalent
  to WP_Theme-&gt;get( &quot;ThemeURI&quot; ).
  """
  themeUri: String

  """
  The current version of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Version&quot; ).
  """
  version: String
}

"""Any node that has a URI"""
interface UniformResourceIdentifiable {
  """The unique resource identifier path"""
  databaseId: Int!

  """The unique resource identifier path"""
  id: ID!

  """The unique resource identifier path"""
  uri: String!
}

"""Input for the UpdateCategory mutation"""
input UpdateCategoryInput {
  """The slug that the category will be an alias of"""
  aliasOf: String
  clientMutationId: String!

  """The description of the category object"""
  description: String

  """The ID of the category object to update"""
  id: ID!

  """The name of the category object to mutate"""
  name: String

  """The ID of the category that should be set as the parent"""
  parentId: ID

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term
  """
  slug: String
}

"""The payload for the UpdateCategory mutation"""
type UpdateCategoryPayload {
  """The created category"""
  category: Category
  clientMutationId: String!
}

"""Input for the updateComment mutation"""
input UpdateCommentInput {
  """User agent used to post the comment."""
  agent: String

  """The approval status of the comment."""
  approved: String

  """The name of the comment's author."""
  author: String

  """The email of the comment's author."""
  authorEmail: String

  """IP address for the comment's author."""
  authorIp: String

  """The url of the comment's author."""
  authorUrl: String
  clientMutationId: String!

  """The ID of the post object the comment belongs to."""
  commentOn: Int

  """Content of the comment."""
  content: String

  """
  The date of the object. Preferable to enter as year/month/day ( e.g.
  01/31/2017 ) as it will rearrange date as fit if it is not specified.
  Incomplete dates may have unintended results for example, "2017" as the input
  will use current date with timestamp 20:17
  """
  date: String

  """The ID of the comment being updated."""
  id: ID!

  """Parent comment of current comment."""
  parent: ID

  """Type of comment."""
  type: String

  """The userID of the comment's author."""
  userId: Int
}

"""The payload for the updateComment mutation"""
type UpdateCommentPayload {
  clientMutationId: String!

  """The comment that was created"""
  comment: Comment

  """
  Whether the mutation succeeded. If the comment is not approved, the server
  will not return the comment to a non authenticated user, but a success message
  can be returned if the create succeeded, and the client can optimistically add
  the comment to the client cache
  """
  success: Boolean
}

"""Input for the updateCustomer mutation"""
input UpdateCustomerInput {
  """User's AOL IM account."""
  aim: String

  """Customer billing information"""
  billing: CustomerAddressInput
  clientMutationId: String!

  """A string containing content about the user."""
  description: String

  """
  A string that will be shown on the site. Defaults to user's username. It is
  likely that you will want to change this, for both appearance and security
  through obscurity (that is if you dont use and delete the default admin user).
  """
  displayName: String

  """A string containing the user's email address."""
  email: String

  """	The user's first name."""
  firstName: String

  """The ID of the user"""
  id: ID!

  """User's Jabber account."""
  jabber: String

  """The user's last name."""
  lastName: String

  """User's locale."""
  locale: String

  """
  A string that contains a URL-friendly name for the user. The default is the user's username.
  """
  nicename: String

  """The user's nickname, defaults to the user's username."""
  nickname: String

  """A string that contains the plain text password for the user."""
  password: String

  """The date the user registered. Format is Y-m-d H:i:s."""
  registered: String

  """
  A string for whether to enable the rich editor or not. False if not empty.
  """
  richEditing: String

  """An array of roles to be assigned to the user."""
  roles: [String]

  """Customer shipping address"""
  shipping: CustomerAddressInput

  """Customer shipping is identical to billing address"""
  shippingSameAsBilling: Boolean

  """A string containing the user's URL for the user's web site."""
  websiteUrl: String

  """User's Yahoo IM account."""
  yim: String
}

"""The payload for the updateCustomer mutation"""
type UpdateCustomerPayload {
  clientMutationId: String!
  customer: Customer
}

"""Input for the updateItemQuantity mutation"""
input UpdateItemQuantityInput {
  clientMutationId: String!

  """Cart item being updated"""
  key: ID!

  """Cart item's new quantity"""
  quantity: Int!
}

"""The payload for the updateItemQuantity mutation"""
type UpdateItemQuantityPayload {
  cartItem: CartItem
  clientMutationId: String!
}

"""Input for the updateMediaItem mutation"""
input UpdateMediaItemInput {
  """Alternative text to display when mediaItem is not displayed"""
  altText: String

  """The userId to assign as the author of the mediaItem"""
  authorId: ID

  """The caption for the mediaItem"""
  caption: String
  clientMutationId: String!

  """The comment status for the mediaItem"""
  commentStatus: String

  """The date of the mediaItem"""
  date: String

  """The date (in GMT zone) of the mediaItem"""
  dateGmt: String

  """Description of the mediaItem"""
  description: String

  """The file name of the mediaItem"""
  filePath: String

  """The file type of the mediaItem"""
  fileType: MimeTypeEnum

  """The ID of the mediaItem object"""
  id: ID!

  """The WordPress post ID or the graphQL postId of the parent object"""
  parentId: ID

  """The ping status for the mediaItem"""
  pingStatus: String

  """The slug of the mediaItem"""
  slug: String

  """The status of the mediaItem"""
  status: MediaItemStatusEnum

  """The title of the mediaItem"""
  title: String
}

"""The payload for the updateMediaItem mutation"""
type UpdateMediaItemPayload {
  clientMutationId: String!
  mediaItem: MediaItem
}

"""Input for the updatePage mutation"""
input UpdatePageInput {
  """The userId to assign as the author of the object"""
  authorId: ID
  clientMutationId: String!

  """The comment status for the object"""
  commentStatus: String

  """The content of the object"""
  content: String

  """
  The date of the object. Preferable to enter as year/month/day (e.g.
  01/31/2017) as it will rearrange date as fit if it is not specified.
  Incomplete dates may have unintended results for example, "2017" as the input
  will use current date with timestamp 20:17
  """
  date: String

  """The ID of the page object"""
  id: ID!

  """
  A field used for ordering posts. This is typically used with nav menu items or
  for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """The ID of the parent object"""
  parentId: ID

  """The password used to protect the content of the object"""
  password: String

  """The slug of the object"""
  slug: String

  """The status of the object"""
  status: PostStatusEnum

  """The title of the object"""
  title: String
}

"""The payload for the updatePage mutation"""
type UpdatePagePayload {
  clientMutationId: String!
  page: Page
}

"""Input for the UpdatePostFormat mutation"""
input UpdatePostFormatInput {
  """The slug that the post_format will be an alias of"""
  aliasOf: String
  clientMutationId: String!

  """The description of the post_format object"""
  description: String

  """The ID of the postFormat object to update"""
  id: ID!

  """The name of the post_format object to mutate"""
  name: String

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term
  """
  slug: String
}

"""The payload for the UpdatePostFormat mutation"""
type UpdatePostFormatPayload {
  clientMutationId: String!

  """The created post_format"""
  postFormat: PostFormat
}

"""Input for the updatePost mutation"""
input UpdatePostInput {
  """The userId to assign as the author of the object"""
  authorId: ID

  """Set connections between the post and categories"""
  categories: PostCategoriesInput
  clientMutationId: String!

  """The comment status for the object"""
  commentStatus: String

  """The content of the object"""
  content: String

  """
  The date of the object. Preferable to enter as year/month/day (e.g.
  01/31/2017) as it will rearrange date as fit if it is not specified.
  Incomplete dates may have unintended results for example, "2017" as the input
  will use current date with timestamp 20:17
  """
  date: String

  """The excerpt of the object"""
  excerpt: String

  """The ID of the post object"""
  id: ID!

  """
  A field used for ordering posts. This is typically used with nav menu items or
  for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """The password used to protect the content of the object"""
  password: String

  """The ping status for the object"""
  pingStatus: String

  """URLs that have been pinged."""
  pinged: [String]

  """Set connections between the post and postFormats"""
  postFormats: PostPostFormatsInput

  """The slug of the object"""
  slug: String

  """The status of the object"""
  status: PostStatusEnum

  """Set connections between the post and tags"""
  tags: PostTagsInput

  """The title of the object"""
  title: String

  """URLs queued to be pinged."""
  toPing: [String]
}

"""The payload for the updatePost mutation"""
type UpdatePostPayload {
  clientMutationId: String!
  post: Post
}

"""Input for the UpdateProductCategory mutation"""
input UpdateProductCategoryInput {
  """The slug that the product_cat will be an alias of"""
  aliasOf: String
  clientMutationId: String!

  """The description of the product_cat object"""
  description: String

  """The ID of the productCategory object to update"""
  id: ID!

  """The name of the product_cat object to mutate"""
  name: String

  """The ID of the product_cat that should be set as the parent"""
  parentId: ID

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term
  """
  slug: String
}

"""The payload for the UpdateProductCategory mutation"""
type UpdateProductCategoryPayload {
  clientMutationId: String!

  """The created product_cat"""
  productCategory: ProductCategory
}

"""Input for the UpdateProductTag mutation"""
input UpdateProductTagInput {
  """The slug that the product_tag will be an alias of"""
  aliasOf: String
  clientMutationId: String!

  """The description of the product_tag object"""
  description: String

  """The ID of the productTag object to update"""
  id: ID!

  """The name of the product_tag object to mutate"""
  name: String

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term
  """
  slug: String
}

"""The payload for the UpdateProductTag mutation"""
type UpdateProductTagPayload {
  clientMutationId: String!

  """The created product_tag"""
  productTag: ProductTag
}

"""Input for the UpdateProductType mutation"""
input UpdateProductTypeInput {
  """The slug that the product_type will be an alias of"""
  aliasOf: String
  clientMutationId: String!

  """The description of the product_type object"""
  description: String

  """The ID of the productType object to update"""
  id: ID!

  """The name of the product_type object to mutate"""
  name: String

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term
  """
  slug: String
}

"""The payload for the UpdateProductType mutation"""
type UpdateProductTypePayload {
  clientMutationId: String!

  """The created product_type"""
  productType: ProductType
}

"""Input for the updateSettings mutation"""
input UpdateSettingsInput {
  clientMutationId: String!

  """Allow people to submit comments on new posts."""
  discussionSettingsDefaultCommentStatus: String

  """
  Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.
  """
  discussionSettingsDefaultPingStatus: String

  """A date format for all date strings."""
  generalSettingsDateFormat: String

  """Site tagline."""
  generalSettingsDescription: String

  """This address is used for admin purposes, like new user notification."""
  generalSettingsEmail: String

  """WordPress locale code."""
  generalSettingsLanguage: String

  """A day number of the week that the week should start on."""
  generalSettingsStartOfWeek: Int

  """A time format for all time strings."""
  generalSettingsTimeFormat: String

  """A city in the same timezone as you."""
  generalSettingsTimezone: String

  """Site title."""
  generalSettingsTitle: String

  """Site URL."""
  generalSettingsUrl: String

  """Blog pages show at most."""
  readingSettingsPostsPerPage: Int

  """Default post category."""
  writingSettingsDefaultCategory: Int

  """Default post format."""
  writingSettingsDefaultPostFormat: String

  """Convert emoticons like :-) and :-P to graphics on display."""
  writingSettingsUseSmilies: Boolean
}

"""The payload for the updateSettings mutation"""
type UpdateSettingsPayload {
  allSettings: Settings
  clientMutationId: String!
  discussionSettings: DiscussionSettings
  generalSettings: GeneralSettings
  readingSettings: ReadingSettings
  writingSettings: WritingSettings
}

"""Input for the UpdateShippingClass mutation"""
input UpdateShippingClassInput {
  """The slug that the product_shipping_class will be an alias of"""
  aliasOf: String
  clientMutationId: String!

  """The description of the product_shipping_class object"""
  description: String

  """The ID of the shippingClass object to update"""
  id: ID!

  """The name of the product_shipping_class object to mutate"""
  name: String

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term
  """
  slug: String
}

"""The payload for the UpdateShippingClass mutation"""
type UpdateShippingClassPayload {
  clientMutationId: String!

  """The created product_shipping_class"""
  shippingClass: ShippingClass
}

"""Input for the UpdateTag mutation"""
input UpdateTagInput {
  """The slug that the post_tag will be an alias of"""
  aliasOf: String
  clientMutationId: String!

  """The description of the post_tag object"""
  description: String

  """The ID of the tag object to update"""
  id: ID!

  """The name of the post_tag object to mutate"""
  name: String

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term
  """
  slug: String
}

"""The payload for the UpdateTag mutation"""
type UpdateTagPayload {
  clientMutationId: String!

  """The created post_tag"""
  tag: Tag
}

"""Input for the updateUser mutation"""
input UpdateUserInput {
  """User's AOL IM account."""
  aim: String
  clientMutationId: String!

  """A string containing content about the user."""
  description: String

  """
  A string that will be shown on the site. Defaults to user's username. It is
  likely that you will want to change this, for both appearance and security
  through obscurity (that is if you dont use and delete the default admin user).
  """
  displayName: String

  """A string containing the user's email address."""
  email: String

  """	The user's first name."""
  firstName: String

  """The ID of the user"""
  id: ID!

  """User's Jabber account."""
  jabber: String

  """The user's last name."""
  lastName: String

  """User's locale."""
  locale: String

  """
  A string that contains a URL-friendly name for the user. The default is the user's username.
  """
  nicename: String

  """The user's nickname, defaults to the user's username."""
  nickname: String

  """A string that contains the plain text password for the user."""
  password: String

  """If true, this will refresh the users JWT secret."""
  refreshJwtUserSecret: Boolean

  """The date the user registered. Format is Y-m-d H:i:s."""
  registered: String

  """
  If true, this will revoke the users JWT secret. If false, this will unrevoke
  the JWT secret AND issue a new one. To revoke, the user must have proper
  capabilities to edit users JWT secrets.
  """
  revokeJwtUserSecret: Boolean

  """
  A string for whether to enable the rich editor or not. False if not empty.
  """
  richEditing: String

  """An array of roles to be assigned to the user."""
  roles: [String]

  """A string containing the user's URL for the user's web site."""
  websiteUrl: String

  """User's Yahoo IM account."""
  yim: String
}

"""The payload for the updateUser mutation"""
type UpdateUserPayload {
  clientMutationId: String!
  user: User
}

"""Input for the UpdateVisibleProduct mutation"""
input UpdateVisibleProductInput {
  """The slug that the product_visibility will be an alias of"""
  aliasOf: String
  clientMutationId: String!

  """The description of the product_visibility object"""
  description: String

  """The ID of the visibleProduct object to update"""
  id: ID!

  """The name of the product_visibility object to mutate"""
  name: String

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term
  """
  slug: String
}

"""The payload for the UpdateVisibleProduct mutation"""
type UpdateVisibleProductPayload {
  clientMutationId: String!

  """The created product_visibility"""
  visibleProduct: VisibleProduct
}

"""A User object"""
type User implements Node & UniformResourceIdentifiable & Commenter {
  """
  Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument.
  """
  avatar(
    """
    The size attribute of the avatar field can be used to fetch avatars of
    different sizes. The value corresponds to the dimension in pixels to fetch.
    The default is 96 pixels.
    """
    size: Int = 96

    """
    Whether to always show the default image, never the Gravatar. Default false
    """
    forceDefault: Boolean
    rating: AvatarRatingEnum
  ): Avatar

  """
  User metadata option name. Usually it will be &quot;wp_capabilities&quot;.
  """
  capKey: String

  """A list of capabilities (permissions) granted to the user"""
  capabilities: [String]

  """Connection between the User type and the Comment type"""
  comments(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: UserToCommentConnectionWhereArgs
  ): UserToCommentConnection

  """Identifies the primary key from the database."""
  databaseId: Int!

  """Description of the user."""
  description: String

  """
  Email address of the user. This is equivalent to the WP_User-&gt;user_email property.
  """
  email: String

  """Connection between the User type and the EnqueuedScript type"""
  enqueuedScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): UserToEnqueuedScriptConnection

  """Connection between the User type and the EnqueuedStylesheet type"""
  enqueuedStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): UserToEnqueuedStylesheetConnection

  """
  A complete list of capabilities including capabilities inherited from a role.
  This is equivalent to the array keys of WP_User-&gt;allcaps.
  """
  extraCapabilities: [String]

  """
  First name of the user. This is equivalent to the WP_User-&gt;user_first_name property.
  """
  firstName: String

  """The globally unique identifier for the user object."""
  id: ID!

  """
  Whether the JWT User secret has been revoked. If the secret has been revoked,
  auth tokens will not be issued until an admin, or user with proper
  capabilities re-issues a secret for the user.
  """
  isJwtAuthSecretRevoked: Boolean!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """
  The expiration for the JWT Token for the user. If not set custom for the user,
  it will use the default sitewide expiration setting
  """
  jwtAuthExpiration: String

  """
  A JWT token that can be used in future requests for authentication/authorization
  """
  jwtAuthToken: String

  """
  A JWT token that can be used in future requests to get a refreshed
  jwtAuthToken. If the refresh token used in a request is revoked or otherwise
  invalid, a valid Auth token will NOT be issued in the response headers.
  """
  jwtRefreshToken: String

  """
  A unique secret tied to the users JWT token that can be revoked or refreshed.
  Revoking the secret prevents JWT tokens from being issued to the user.
  Refreshing the token invalidates previously issued tokens, but allows new
  tokens to be issued.
  """
  jwtUserSecret: String

  """
  Last name of the user. This is equivalent to the WP_User-&gt;user_last_name property.
  """
  lastName: String

  """
  The preferred language locale set for the user. Value derived from get_user_locale().
  """
  locale: String

  """Connection between the User type and the mediaItem type"""
  mediaItems(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: UserToMediaItemConnectionWhereArgs
  ): UserToMediaItemConnection

  """
  Display name of the user. This is equivalent to the WP_User-&gt;dispaly_name property.
  """
  name: String

  """
  The nicename for the user. This field is equivalent to WP_User-&gt;user_nicename
  """
  nicename: String

  """Nickname of the user."""
  nickname: String

  """Connection between the User type and the page type"""
  pages(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: UserToPageConnectionWhereArgs
  ): UserToPageConnection

  """Connection between the User type and the post type"""
  posts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: UserToPostConnectionWhereArgs
  ): UserToPostConnection

  """
  The date the user registered or was created. The field follows a full ISO8601 date string format.
  """
  registeredDate: String

  """Connection between the User and Revisions authored by the user"""
  revisions(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """Arguments for filtering the connection"""
    where: UserToContentRevisionUnionConnectionWhereArgs
  ): UserToContentRevisionUnionConnection

  """Connection between the User type and the UserRole type"""
  roles(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): UserToUserRoleConnection

  """
  The slug for the user. This field is equivalent to WP_User-&gt;user_nicename
  """
  slug: String

  """The unique resource identifier path"""
  uri: String!

  """A website url that is associated with the user."""
  url: String

  """The Id of the user. Equivalent to WP_User-&gt;ID"""
  userId: Int @deprecated(reason: "Deprecated in favor of databaseId")

  """
  Username for the user. This field is equivalent to WP_User-&gt;user_login.
  """
  username: String
}

"""
The Type of Identifier used to fetch a single User node. To be used along with the "id" field. Default is "ID".
"""
enum UserNodeIdTypeEnum {
  """The Database ID for the node"""
  DATABASE_ID

  """The Email of the User"""
  EMAIL

  """The hashed Global ID"""
  ID

  """The slug of the User"""
  SLUG

  """The URI for the node"""
  URI

  """The username the User uses to login with"""
  USERNAME
}

"""A user role object"""
type UserRole implements Node {
  """The capabilities that belong to this role"""
  capabilities: [String]

  """The display name of the role"""
  displayName: String

  """The globally unique identifier for the user role object."""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """The registered name of the role"""
  name: String
}

"""Names of available user roles"""
enum UserRoleEnum {
  AUTHOR
  CONTRIBUTOR
  CUSTOMER
  EDITOR
  SHOP_MANAGER
  SUBSCRIBER
}

"""Connection between the User type and the Comment type"""
type UserToCommentConnection {
  """Edges for the UserToCommentConnection connection"""
  edges: [UserToCommentConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Comment]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type UserToCommentConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Comment
}

"""Arguments for filtering the UserToCommentConnection connection"""
input UserToCommentConnectionWhereArgs {
  """Comment author email address."""
  authorEmail: String

  """Array of author IDs to include comments for."""
  authorIn: [ID]

  """Array of author IDs to exclude comments for."""
  authorNotIn: [ID]

  """Comment author URL."""
  authorUrl: String

  """Array of comment IDs to include."""
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]

  """Include comments of a given type."""
  commentType: String

  """Include comments from a given array of comment types."""
  commentTypeIn: [String]

  """Exclude comments from a given array of comment types."""
  commentTypeNotIn: String

  """Content object author ID to limit results by."""
  contentAuthor: [ID]

  """Array of author IDs to retrieve comments for."""
  contentAuthorIn: [ID]

  """Array of author IDs *not* to retrieve comments for."""
  contentAuthorNotIn: [ID]

  """Limit results to those affiliated with a given content object ID."""
  contentId: ID

  """Array of content object IDs to include affiliated comments for."""
  contentIdIn: [ID]

  """Array of content object IDs to exclude affiliated comments for."""
  contentIdNotIn: [ID]

  """Content object name to retrieve affiliated comments for."""
  contentName: String

  """Content Object parent ID to retrieve affiliated comments for."""
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [ContentTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be
  returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """Karma score to retrieve matching comments for."""
  karma: Int

  """The cardinality of the order of the connection"""
  order: OrderEnum

  """Field to order the comments by."""
  orderby: CommentsConnectionOrderbyEnum

  """Parent ID of comment to retrieve children of."""
  parent: Int

  """Array of parent IDs of comments to retrieve children for."""
  parentIn: [ID]

  """Array of parent IDs of comments *not* to retrieve children for."""
  parentNotIn: [ID]

  """Search term(s) to retrieve matching comments for."""
  search: String

  """Comment status to limit results by."""
  status: String

  """Include comments for a specific user ID."""
  userId: ID
}

"""Connection between the User type and the ContentRevisionUnion type"""
type UserToContentRevisionUnionConnection {
  """Edges for the UserToContentRevisionUnionConnection connection"""
  edges: [UserToContentRevisionUnionConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [ContentRevisionUnion]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type UserToContentRevisionUnionConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: ContentRevisionUnion
}

"""
Arguments for filtering the UserToContentRevisionUnionConnection connection
"""
input UserToContentRevisionUnionConnectionWhereArgs {
  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the User type and the EnqueuedScript type"""
type UserToEnqueuedScriptConnection {
  """Edges for the UserToEnqueuedScriptConnection connection"""
  edges: [UserToEnqueuedScriptConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [EnqueuedScript]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type UserToEnqueuedScriptConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: EnqueuedScript
}

"""Connection between the User type and the EnqueuedStylesheet type"""
type UserToEnqueuedStylesheetConnection {
  """Edges for the UserToEnqueuedStylesheetConnection connection"""
  edges: [UserToEnqueuedStylesheetConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [EnqueuedStylesheet]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type UserToEnqueuedStylesheetConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: EnqueuedStylesheet
}

"""Connection between the User type and the mediaItem type"""
type UserToMediaItemConnection {
  """Edges for the UserToMediaItemConnection connection"""
  edges: [UserToMediaItemConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [MediaItem]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type UserToMediaItemConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: MediaItem
}

"""Arguments for filtering the UserToMediaItemConnection connection"""
input UserToMediaItemConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the User type and the page type"""
type UserToPageConnection {
  """Edges for the UserToPageConnection connection"""
  edges: [UserToPageConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Page]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type UserToPageConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Page
}

"""Arguments for filtering the UserToPageConnection connection"""
input UserToPageConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """Title of the object"""
  title: String
}

"""Connection between the User type and the post type"""
type UserToPostConnection {
  """Edges for the UserToPostConnection connection"""
  edges: [UserToPostConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [Post]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type UserToPostConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: Post
}

"""Arguments for filtering the UserToPostConnection connection"""
input UserToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int

  """Find objects connected to author(s) in the array of author's userIds"""
  authorIn: [ID]

  """Find objects connected to the author by the author's nicename"""
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]

  """Category ID"""
  categoryId: Int

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]

  """Use Category Slug"""
  categoryName: String

  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]

  """Filter the connection based on dates"""
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean

  """Specific ID of the object"""
  id: Int

  """Array of IDs for the objects to retrieve"""
  in: [ID]

  """Get objects with a specific mimeType property"""
  mimeType: MimeTypeEnum

  """Slug / post_name of the object"""
  name: String

  """Specify objects to retrieve. Use slugs"""
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]

  """What paramater to use to order the objects by."""
  orderby: [PostObjectsConnectionOrderbyInput]

  """Use ID to return only children. Use 0 to return only top-level items"""
  parent: ID

  """Specify objects whose parent is in an array"""
  parentIn: [ID]

  """Specify posts whose parent is not in an array"""
  parentNotIn: [ID]

  """Show posts with a specific password."""
  password: String

  """Show Posts based on a keyword search"""
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """Tag Slug"""
  tag: String

  """Use Tag ID"""
  tagId: String

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagIn: [ID]

  """Array of tag IDs, used to display objects from one tag OR another"""
  tagNotIn: [ID]

  """Array of tag slugs, used to display objects from one tag OR another"""
  tagSlugAnd: [String]

  """Array of tag slugs, used to exclude objects in specified tags"""
  tagSlugIn: [String]

  """Title of the object"""
  title: String
}

"""Connection between the User type and the UserRole type"""
type UserToUserRoleConnection {
  """Edges for the UserToUserRoleConnection connection"""
  edges: [UserToUserRoleConnectionEdge]

  """The nodes of the connection, without the edges"""
  nodes: [UserRole]

  """Information about pagination in a connection."""
  pageInfo: WPPageInfo
}

"""An edge in a connection"""
type UserToUserRoleConnectionEdge {
  """A cursor for use in pagination"""
  cursor: String

  """The item at the end of the edge"""
  node: UserRole
}

"""Field to order the connection by"""
enum UsersConnectionOrderbyEnum {
  """Order by display name"""
  DISPLAY_NAME

  """Order by email address"""
  EMAIL

  """Order by login"""
  LOGIN

  """Preserve the login order given in the LOGIN_IN array"""
  LOGIN_IN

  """Order by nice name"""
  NICE_NAME

  """Preserve the nice name order given in the NICE_NAME_IN array"""
  NICE_NAME_IN

  """Order by registration date"""
  REGISTERED

  """Order by URL"""
  URL
}

"""Options for ordering the connection"""
input UsersConnectionOrderbyInput {
  field: UsersConnectionOrderbyEnum!
  order: OrderEnum
}

"""A product variation attribute object"""
type VariationAttribute {
  """The Id of the order. Equivalent to WP_Post-&gt;ID"""
  id: Int

  """Name of attribute"""
  name: String

  """Selected value of attribute"""
  value: String
}

"""The visibleProduct type"""
type VisibleProduct implements Node & TermNode & UniformResourceIdentifiable {
  """The number of objects connected to the object"""
  count: Int

  """Identifies the primary key from the database."""
  databaseId: Int!

  """The description of the object"""
  description: String

  """Connection between the TermNode type and the EnqueuedScript type"""
  enqueuedScripts(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): TermNodeToEnqueuedScriptConnection

  """Connection between the TermNode type and the EnqueuedStylesheet type"""
  enqueuedStylesheets(
    """The number of items to return after the referenced "after" cursor"""
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): TermNodeToEnqueuedStylesheetConnection

  """The globally unique ID for the object"""
  id: ID!

  """Whether the object is restricted from the current viewer"""
  isRestricted: Boolean

  """The link to the term"""
  link: String

  """The human friendly name of the object."""
  name: String

  """An alphanumeric identifier for the object unique to its type."""
  slug: String

  """Connection between the visibleProduct type and the Taxonomy type"""
  taxonomy: VisibleProductToTaxonomyConnectionEdge

  """The ID of the term group that this term object belongs to"""
  termGroupId: Int

  """The taxonomy ID that the object is associated with"""
  termTaxonomyId: Int

  """The unique resource identifier path"""
  uri: String!

  """The id field matches the WP_Post-&gt;ID field."""
  visibleProductId: Int @deprecated(reason: "Deprecated in favor of databaseId")
}

"""
The Type of Identifier used to fetch a single resource. Default is ID.
"""
enum VisibleProductIdType {
  """The Database ID for the node"""
  DATABASE_ID

  """The hashed Global ID"""
  ID

  """The name of the node"""
  NAME

  """Url friendly name of the node"""
  SLUG

  """The URI for the node"""
  URI
}

"""Connection between the visibleProduct type and the Taxonomy type"""
type VisibleProductToTaxonomyConnectionEdge {
  """The nodes of the connection, without the edges"""
  node: Taxonomy
}

"""Field to order the connection by"""
enum WCConnectionOrderbyEnum {
  """Order by publish date"""
  DATE

  """Preserve the ID order given in the IN array"""
  IN

  """Order by the menu order value"""
  MENU_ORDER

  """Order by last modified date"""
  MODIFIED

  """Preserve slug order given in the NAME_IN array"""
  NAME_IN

  """Order by parent ID"""
  PARENT

  """Order by the menu order value"""
  PRICE

  """Order by the menu order value"""
  REGULAR_PRICE

  """Order by the menu order value"""
  SALE_PRICE

  """Order by slug"""
  SLUG
}

"""Options for ordering the connection"""
input WCConnectionOrderbyInput {
  field: WCConnectionOrderbyEnum!
  order: OrderEnum
}

"""Information about pagination in a connection."""
type WPPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""The writing setting type"""
type WritingSettings {
  """Default post category."""
  defaultCategory: Int

  """Default post format."""
  defaultPostFormat: String

  """Convert emoticons like :-) and :-P to graphics on display."""
  useSmilies: Boolean
}
